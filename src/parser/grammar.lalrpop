use smol_str::SmolStr;
use logos::Span;
use lalrpop_util::ParseError;
use crate::ast::*;
use crate::blocks::*;
use crate::diagnostic::*;
use crate::lexer::token::*;
use crate::lexer::adaptor::*;
use crate::misc::*;

grammar<'a>(sprite: &'a mut Sprite);

pub Sprite = Declr*;

#[inline]
Type: Type = {
    <l:@L> <n:NAME> <r:@R> => Type::Struct { name: n, span: l..r },
    => Type::Value,
}

Arg: Arg = {
    <t:Type> <l:@L> <n:NAME> <r:@R> => Arg { name: n, span: l..r, type_: t },
}

Stmts: Vec<Stmt> = "{" <Stmt*> "}";

Declr: () = {
    COSTUMES Comma<Costume> ";" => {},
    <w:NOWARP?> PROC <l:@L> <n:NAME> <r:@R> <a:Comma<Arg>> <b:Stmts> => {
        sprite.procs.insert(n.clone(), Proc::new(n, l..r, a, b, w.is_none()));
    },
    <l:@L> ONFLAG <r:@R> <b:Stmts> => sprite.events.push(EventKind::OnFlag.to_event(l..r, b)),
    <l:@L> ONKEY <r:@R> <kl:@L> <key:STR> <kr:@R> <b:Stmts> => sprite.events.push(EventKind::OnKey { key, span: kl..kr }.to_event(l..r, b)),
    <l:@L> ONCLICK <r:@R> <b:Stmts> => sprite.events.push(EventKind::OnClick.to_event(l..r, b)),
    <l:@L> ONBACKDROP <r:@R> <kl:@L> <backdrop:STR> <kr:@R> <b:Stmts> => sprite.events.push(EventKind::OnBackdrop { backdrop, span: kl..kr }.to_event(l..r, b)),
    <l:@L> ONLOUDNESS <r:@R> ">" <value:IfExpr> <b:Stmts> => sprite.events.push(EventKind::OnLoudnessGt { value }.to_event(l..r, b)),
    <l:@L> ONTIMER <r:@R> ">" <value:IfExpr> <b:Stmts> => sprite.events.push(EventKind::OnTimerGt { value }.to_event(l..r, b)),
    <l:@L> ONCLONE <r:@R> <b:Stmts> => sprite.events.push(EventKind::OnClone.to_event(l..r, b)),
    STRUCT <l:@L> <name:NAME> <r:@R> "{" <fields:SpannedComma<NAME>> "}" => {
        sprite.structs.insert(name.clone(), Struct::new(name, l..r, fields));
    },
    LIST <t:Type> <l:@L> <name:NAME> <r:@R> ";" => {
        sprite.lists.insert(name.clone(), List { name, span: l..r, type_: t, cmd: None });
    },
    LIST <t:Type> <l:@L> <name:NAME> <r:@R> "=" <pl:@L> <program:NAME?> <pr:@R> <cl:@L> <cmd:CMD> <cr:@R> ";" => {
        sprite.lists.insert(name.clone(), List { name, span: l..r, type_: t, cmd: Some(Cmd { program: program.map(|program| Program { name: program, span: pl..pr }), cmd, span: cl..cr }) });
    },
}

Stmt: Stmt = {
    <If>,
    REPEAT <t:IfExpr> <b:Stmts> => Stmt::Repeat { times: t, body: b },
    <l:@L> FOREVER <r:@R> <b:Stmts> => Stmt::Forever { body: b, span: l..r },
    UNTIL <c:IfExpr> <b:Stmts> => Stmt::Until { cond: c, body: b },
    <l:@L> <n:NAME> <r:@R> "++" ";" => Stmt::ChangeVar { name: Name::Name { name: n.clone(), span: l..r }, value: Value::Int(1).to_expr(l..r).into() },
    <l:@L> <n:NAME> <r:@R> "--" ";" => Stmt::ChangeVar { name: Name::Name { name: n.clone(), span: l..r }, value: Value::Int(-1).to_expr(l..r).into() },
    <l:@L> <n:NAME> <r:@R> "+=" <v:Expr> ";" => Stmt::ChangeVar { name: Name::Name { name: n.clone(), span: l..r }, value: v },
    <l:@L> <n:NAME> <r:@R> "-=" <v:Expr> ";" => Stmt::SetVar { name: Name::Name { name: n.clone(), span: l..r }, value: BinOp::Sub.to_expr(l..r, Expr::Name(Name::Name { name: n, span: l..r }).into(), v).into(), type_: Type::Value, is_local: false },
    <l:@L> <n:NAME> <r:@R> "*=" <v:Expr> ";" => Stmt::SetVar { name: Name::Name { name: n.clone(), span: l..r }, value: BinOp::Mul.to_expr(l..r, Expr::Name(Name::Name { name: n, span: l..r }).into(), v).into(), type_: Type::Value, is_local: false },
    <l:@L> <n:NAME> <r:@R> "/=" <v:Expr> ";" => Stmt::SetVar { name: Name::Name { name: n.clone(), span: l..r }, value: BinOp::Div.to_expr(l..r, Expr::Name(Name::Name { name: n, span: l..r }).into(), v).into(), type_: Type::Value, is_local: false },
    <l:@L> <n:NAME> <r:@R> "//=" <v:Expr> ";" => Stmt::SetVar { name: Name::Name { name: n.clone(), span: l..r }, value: BinOp::FloorDiv.to_expr(l..r, Expr::Name(Name::Name { name: n, span: l..r }).into(), v).into(), type_: Type::Value, is_local: false },
    <l:@L> <n:NAME> <r:@R> "%=" <v:Expr> ";" => Stmt::SetVar { name: Name::Name { name: n.clone(), span: l..r }, value: BinOp::Mod.to_expr(l..r, Expr::Name(Name::Name { name: n, span: l..r }).into(), v).into(), type_: Type::Value, is_local: false },
    <l:@L> <n:NAME> <r:@R> "&=" <v:Expr> ";" => Stmt::SetVar { name: Name::Name { name: n.clone(), span: l..r }, value: BinOp::Join.to_expr(l..r, Expr::Name(Name::Name { name: n, span: l..r }).into(), v).into(), type_: Type::Value, is_local: false },
    <t:Type> <l:@L> <n:NAME> <r:@R> "=" <v:Expr> ";" => Stmt::SetVar { name: Name::Name { name: n, span: l..r }, value: v, type_: t, is_local: false },
    LOCAL <t:Type> <l:@L> <n:NAME> <r:@R> "=" <v:Expr> ";" => Stmt::SetVar { name: Name::Name { name: n, span: l..r }, value: v, type_: t, is_local: true },
    <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> "=" <v:Expr> ";" => Stmt::SetVar { name: Name::DotName { lhs: n, lhs_span: l..r, rhs: f, rhs_span: lf..rf }, value: v, type_: Type::Value, is_local: false },
    <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> "+=" <v:Expr> ";" => Stmt::ChangeVar { name: Name::DotName { lhs: n.clone(), lhs_span: l..r, rhs: f.clone(), rhs_span: lf..rf }, value: v },
    <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> "++" ";" => Stmt::ChangeVar { name: Name::DotName { lhs: n.clone(), lhs_span: l..r, rhs: f.clone(), rhs_span: lf..rf }, value: Value::Int(1).to_expr(l..r).into() },
    <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> "--" ";" => Stmt::ChangeVar { name: Name::DotName { lhs: n.clone(), lhs_span: l..r, rhs: f.clone(), rhs_span: lf..rf }, value: Value::Int(-1).to_expr(l..r).into() },
    <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> "-=" <v:Expr> ";" => {
        let name = Name::DotName { lhs: n.clone(), lhs_span: l..r, rhs: f.clone(), rhs_span: lf..rf };
        Stmt::SetVar { name: name.clone(), value: BinOp::Sub.to_expr(l..r, Expr::Name(name).into(), v).into(), type_: Type::Value, is_local: false }
    },
    <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> "*=" <v:Expr> ";" => {
        let name = Name::DotName { lhs: n.clone(), lhs_span: l..r, rhs: f.clone(), rhs_span: lf..rf };
        Stmt::SetVar { name: name.clone(), value: BinOp::Mul.to_expr(l..r, Expr::Name(name).into(), v).into(), type_: Type::Value, is_local: false }
    },
    <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> "/=" <v:Expr> ";" => {
        let name = Name::DotName { lhs: n.clone(), lhs_span: l..r, rhs: f.clone(), rhs_span: lf..rf };
        Stmt::SetVar { name: name.clone(), value: BinOp::Div.to_expr(l..r, Expr::Name(name).into(), v).into(), type_: Type::Value, is_local: false }
    },
    <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> "//=" <v:Expr> ";" => {
        let name = Name::DotName { lhs: n.clone(), lhs_span: l..r, rhs: f.clone(), rhs_span: lf..rf };
        Stmt::SetVar { name: name.clone(), value: BinOp::FloorDiv.to_expr(l..r, Expr::Name(name).into(), v).into(), type_: Type::Value, is_local: false }
    },
    <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> "%=" <v:Expr> ";" => {
        let name = Name::DotName { lhs: n.clone(), lhs_span: l..r, rhs: f.clone(), rhs_span: lf..rf };
        Stmt::SetVar { name: name.clone(), value: BinOp::Mod.to_expr(l..r, Expr::Name(name).into(), v).into(), type_: Type::Value, is_local: false }
    },
    <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> "&=" <v:Expr> ";" => {
        let name = Name::DotName { lhs: n.clone(), lhs_span: l..r, rhs: f.clone(), rhs_span: lf..rf };
        Stmt::SetVar { name: name.clone(), value: BinOp::Join.to_expr(l..r, Expr::Name(name).into(), v).into(), type_: Type::Value, is_local: false }
    },
    SHOW <name:NameName> ";" => Stmt::Show (name),
    HIDE <name:NameName> ";" => Stmt::Hide (name),
    <l:@L> SHOW <r:@R> ";" => Stmt::Block { block: Block::Show, span: l..r, args: vec![] },
    <l:@L> HIDE <r:@R> ";" => Stmt::Block { block: Block::Hide, span: l..r, args: vec![] },
    ADD <v:Expr> TO <n:NameName> ";" => Stmt::AddToList { name: n, value: v },
    DELETE <name:NameName> ";" => Stmt::DeleteList (name),
    DELETE <name:NameName> "[" <index:Expr> "]" ";" => Stmt::DeleteListIndex { name, index },
    <name:NameName> "[" <index:Expr> "]" "=" <value:Expr> ";" => Stmt::SetListIndex { name, index, value },
    <name:NameName> "[" <index:Expr> "]" "+=" <value:Expr> ";" => Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Add.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() },
    <name:NameName> "[" <index:Expr> "]" "-=" <value:Expr> ";" => Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Sub.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() },
    <name:NameName> "[" <index:Expr> "]" "*=" <value:Expr> ";" => Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Mul.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() },
    <name:NameName> "[" <index:Expr> "]" "/=" <value:Expr> ";" => Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Div.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() },
    <name:NameName> "[" <index:Expr> "]" "//=" <value:Expr> ";" => Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::FloorDiv.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() },
    <name:NameName> "[" <index:Expr> "]" "%=" <value:Expr> ";" => Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Mod.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() },
    <name:NameName> "[" <index:Expr> "]" "&=" <value:Expr> ";" => Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Join.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "." <lf:@L> <f:NAME> <rf:@R> "=" <value:Expr> ";" => Stmt::SetListIndex { name: Name::DotName { lhs: name, lhs_span: l..r, rhs: f, rhs_span: lf..rf }, index, value },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "." <lf:@L> <f:NAME> <rf:@R> "+=" <value:Expr> ";" => {
        let name = Name::DotName { lhs: name, lhs_span: l..r, rhs: f, rhs_span: lf..rf };
        Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Add.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() }
    },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "." <lf:@L> <f:NAME> <rf:@R> "++" ";" => {
        let name = Name::DotName { lhs: name, lhs_span: l..r, rhs: f, rhs_span: lf..rf };
        Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Add.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name.clone()).into(), index).into(), Value::Int(1).to_expr(name.span().clone()).into()).into() }
    },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "." <lf:@L> <f:NAME> <rf:@R> "--" ";" => {
        let name = Name::DotName { lhs: name, lhs_span: l..r, rhs: f, rhs_span: lf..rf };
        Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Sub.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name.clone()).into(), index).into(), Value::Int(1).to_expr(name.span().clone()).into()).into() }
    },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "." <lf:@L> <f:NAME> <rf:@R> "-=" <value:Expr> ";" => {
        let name = Name::DotName { lhs: name, lhs_span: l..r, rhs: f, rhs_span: lf..rf };
        Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Sub.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() }
    },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "." <lf:@L> <f:NAME> <rf:@R> "*=" <value:Expr> ";" => {
        let name = Name::DotName { lhs: name, lhs_span: l..r, rhs: f, rhs_span: lf..rf };
        Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Mul.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() }
    },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "." <lf:@L> <f:NAME> <rf:@R> "/=" <value:Expr> ";" => {
        let name = Name::DotName { lhs: name, lhs_span: l..r, rhs: f, rhs_span: lf..rf };
        Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Div.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() }
    },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "." <lf:@L> <f:NAME> <rf:@R> "//=" <value:Expr> ";" => {
        let name = Name::DotName { lhs: name, lhs_span: l..r, rhs: f, rhs_span: lf..rf };
        Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::FloorDiv.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() }
    },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "." <lf:@L> <f:NAME> <rf:@R> "%=" <value:Expr> ";" => {
        let name = Name::DotName { lhs: name, lhs_span: l..r, rhs: f, rhs_span: lf..rf };
        Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Mod.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() }
    },
    <l:@L> <name:NAME> <r:@R> "[" <index:Expr> "]" "." <lf:@L> <f:NAME> <rf:@R> "&=" <value:Expr> ";" => {
        let name = Name::DotName { lhs: name, lhs_span: l..r, rhs: f, rhs_span: lf..rf };
        Stmt::SetListIndex { name: name.clone(), index: index.clone(), value: BinOp::Join.to_expr(name.span().clone(), BinOp::Of.to_expr(name.span().clone(), Expr::Name(name).into(), index).into(), value).into() }
    },
    INSERT <value:Expr> AT <name:Name> "[" <index:Expr> "]" ";" => Stmt::InsertAtList { name, index, value },
    <l:@L> <name:NAME> <r:@R> <a:Comma<Expr>> ";" => match Block::from_shape(&name, a.len()) {
        Some(block) => Stmt::Block { block, span: l..r, args: a },
        None => Stmt::ProcCall { name, span: l..r, args: a },
    },
}

If: Stmt = {
    IF <cond:IfExpr> <if_body:Stmts> => Stmt::Branch { cond, if_body, else_body: Default::default() },
    IF <cond:IfExpr> <if_body:Stmts> ELSE <else_body:Stmts> => Stmt::Branch { cond, if_body, else_body },
    IF <cond:IfExpr> <if_body:Stmts> <else_body:Elif> => Stmt::Branch { cond, if_body, else_body: vec![else_body] },
}

Elif: Stmt = {
    ELIF <cond:IfExpr> <body:Stmts> => Stmt::Branch { cond, if_body: body, else_body: Default::default() },
    ELIF <cond:IfExpr> <body:Stmts> <else_body:Elif> => Stmt::Branch { cond, if_body: body, else_body: vec![else_body] },
    ELIF <cond:IfExpr> <body:Stmts> ELSE <else_body:Stmts> => Stmt::Branch { cond, if_body: body, else_body },
}

Costume: () = {
    <l:@L> <path:STR> <r:@R> <alias:(AS <STR>)?> => {
        sprite.costumes.push(Costume::new(path, alias, l..r));
    }
}

Exprs: Vec<Rrc<Expr>> = <Comma<Expr>>;

Expr: Rrc<Expr> = {
    #[precedence(level="1")]
    StructLiteral,
    Term,
    #[precedence(level="2")] #[assoc(side="right")]
    <l:@L> "-"     <e:Expr> <r:@R> => UnOp::Minus  .to_expr(l..r, e).into(),
    <l:@L> NOT     <e:Expr> <r:@R> => UnOp::Not    .to_expr(l..r, e).into(),
    <l:@L> LENGTH  <e:Expr> <r:@R> => UnOp::Length .to_expr(l..r, e).into(),
    <l:@L> ROUND   <e:Expr> <r:@R> => UnOp::Round  .to_expr(l..r, e).into(),
    <l:@L> ABS     <e:Expr> <r:@R> => UnOp::Abs    .to_expr(l..r, e).into(),
    <l:@L> FLOOR   <e:Expr> <r:@R> => UnOp::Floor  .to_expr(l..r, e).into(),
    <l:@L> CEIL    <e:Expr> <r:@R> => UnOp::Ceil   .to_expr(l..r, e).into(),
    <l:@L> SQRT    <e:Expr> <r:@R> => UnOp::Sqrt   .to_expr(l..r, e).into(),
    <l:@L> SIN     <e:Expr> <r:@R> => UnOp::Sin    .to_expr(l..r, e).into(),
    <l:@L> COS     <e:Expr> <r:@R> => UnOp::Cos    .to_expr(l..r, e).into(),
    <l:@L> TAN     <e:Expr> <r:@R> => UnOp::Tan    .to_expr(l..r, e).into(),
    <l:@L> ASIN    <e:Expr> <r:@R> => UnOp::Asin   .to_expr(l..r, e).into(),
    <l:@L> ACOS    <e:Expr> <r:@R> => UnOp::Acos   .to_expr(l..r, e).into(),
    <l:@L> ATAN    <e:Expr> <r:@R> => UnOp::Atan   .to_expr(l..r, e).into(),
    <l:@L> LN      <e:Expr> <r:@R> => UnOp::Ln     .to_expr(l..r, e).into(),
    <l:@L> LOG     <e:Expr> <r:@R> => UnOp::Log    .to_expr(l..r, e).into(),
    <l:@L> ANTILN  <e:Expr> <r:@R> => UnOp::AntiLn .to_expr(l..r, e).into(),
    <l:@L> ANTILOG <e:Expr> <r:@R> => UnOp::AntiLog.to_expr(l..r, e).into(),
    #[precedence(level="3")] #[assoc(side="left")]
    <l:@L> <lhs:Expr> "*" <rhs:Expr> <r:@R> => BinOp::Mul     .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:Expr> "/" <rhs:Expr> <r:@R> => BinOp::Div     .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:Expr> "//"<rhs:Expr> <r:@R> => BinOp::FloorDiv.to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:Expr> "%" <rhs:Expr> <r:@R> => BinOp::Mod     .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="4")] #[assoc(side="left")]
    <l:@L> <lhs:Expr> "+" <rhs:Expr> <r:@R> => BinOp::Add     .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:Expr> "-" <rhs:Expr> <r:@R> => BinOp::Sub     .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="5")] #[assoc(side="left")]
    <l:@L> <lhs:Expr> "<" <rhs:Expr> <r:@R> => BinOp::Lt      .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:Expr> "<="<rhs:Expr> <r:@R> => BinOp::Le      .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:Expr> ">" <rhs:Expr> <r:@R> => BinOp::Gt      .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:Expr> ">="<rhs:Expr> <r:@R> => BinOp::Ge      .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="6")] #[assoc(side="right")]
    <l:@L> <lhs:Expr> "&" <rhs:Expr> <r:@R> => BinOp::Join    .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="7")] #[assoc(side="left")]
    <l:@L> <lhs:Expr>  IN <rhs:Expr> <r:@R> => BinOp::In      .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:Expr> "=="<rhs:Expr> <r:@R> => BinOp::Eq      .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:Expr> "!="<rhs:Expr> <r:@R> => BinOp::Ne      .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="8")] #[assoc(side="left")]
    <l:@L> <lhs:Expr> AND <rhs:Expr> <r:@R> => BinOp::And     .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="9")] #[assoc(side="left")]
    <l:@L> <lhs:Expr> OR  <rhs:Expr> <r:@R> => BinOp::Or      .to_expr(l..r, lhs, rhs).into(),
}

IfExpr: Rrc<Expr> = {
    #[precedence(level="1")]
    Term,
    #[precedence(level="2")] #[assoc(side="right")]
    <l:@L> "-"     <e:IfExpr> <r:@R> => UnOp::Minus  .to_expr(l..r, e).into(),
    <l:@L> NOT     <e:IfExpr> <r:@R> => UnOp::Not    .to_expr(l..r, e).into(),
    <l:@L> LENGTH  <e:IfExpr> <r:@R> => UnOp::Length .to_expr(l..r, e).into(),
    <l:@L> ROUND   <e:IfExpr> <r:@R> => UnOp::Round  .to_expr(l..r, e).into(),
    <l:@L> ABS     <e:IfExpr> <r:@R> => UnOp::Abs    .to_expr(l..r, e).into(),
    <l:@L> FLOOR   <e:IfExpr> <r:@R> => UnOp::Floor  .to_expr(l..r, e).into(),
    <l:@L> CEIL    <e:IfExpr> <r:@R> => UnOp::Ceil   .to_expr(l..r, e).into(),
    <l:@L> SQRT    <e:IfExpr> <r:@R> => UnOp::Sqrt   .to_expr(l..r, e).into(),
    <l:@L> SIN     <e:IfExpr> <r:@R> => UnOp::Sin    .to_expr(l..r, e).into(),
    <l:@L> COS     <e:IfExpr> <r:@R> => UnOp::Cos    .to_expr(l..r, e).into(),
    <l:@L> TAN     <e:IfExpr> <r:@R> => UnOp::Tan    .to_expr(l..r, e).into(),
    <l:@L> ASIN    <e:IfExpr> <r:@R> => UnOp::Asin   .to_expr(l..r, e).into(),
    <l:@L> ACOS    <e:IfExpr> <r:@R> => UnOp::Acos   .to_expr(l..r, e).into(),
    <l:@L> ATAN    <e:IfExpr> <r:@R> => UnOp::Atan   .to_expr(l..r, e).into(),
    <l:@L> LN      <e:IfExpr> <r:@R> => UnOp::Ln     .to_expr(l..r, e).into(),
    <l:@L> LOG     <e:IfExpr> <r:@R> => UnOp::Log    .to_expr(l..r, e).into(),
    <l:@L> ANTILN  <e:IfExpr> <r:@R> => UnOp::AntiLn .to_expr(l..r, e).into(),
    <l:@L> ANTILOG <e:IfExpr> <r:@R> => UnOp::AntiLog.to_expr(l..r, e).into(),
    #[precedence(level="3")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr> "*" <rhs:IfExpr> <r:@R> => BinOp::Mul     .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:IfExpr> "/" <rhs:IfExpr> <r:@R> => BinOp::Div     .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:IfExpr> "//"<rhs:IfExpr> <r:@R> => BinOp::FloorDiv.to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:IfExpr> "%" <rhs:IfExpr> <r:@R> => BinOp::Mod     .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="4")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr> "+" <rhs:IfExpr> <r:@R> => BinOp::Add     .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:IfExpr> "-" <rhs:IfExpr> <r:@R> => BinOp::Sub     .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="5")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr> "<" <rhs:IfExpr> <r:@R> => BinOp::Lt      .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:IfExpr> "<="<rhs:IfExpr> <r:@R> => BinOp::Le      .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:IfExpr> ">" <rhs:IfExpr> <r:@R> => BinOp::Gt      .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:IfExpr> ">="<rhs:IfExpr> <r:@R> => BinOp::Ge      .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="6")] #[assoc(side="right")]
    <l:@L> <lhs:IfExpr> "&" <rhs:IfExpr> <r:@R> => BinOp::Join    .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="7")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr>  IN <rhs:IfExpr> <r:@R> => BinOp::In      .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:IfExpr> "=="<rhs:IfExpr> <r:@R> => BinOp::Eq      .to_expr(l..r, lhs, rhs).into(),
    <l:@L> <lhs:IfExpr> "!="<rhs:IfExpr> <r:@R> => BinOp::Ne      .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="8")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr> AND <rhs:IfExpr> <r:@R> => BinOp::And     .to_expr(l..r, lhs, rhs).into(),
    #[precedence(level="9")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr> OR  <rhs:IfExpr> <r:@R> => BinOp::Or      .to_expr(l..r, lhs, rhs).into(),
}

Term: Rrc<Expr> = {
    "(" <Expr> ")",
    <l:@L> TRUE      <r:@R> => Value::from(1).to_expr(l..r).into(),
    <l:@L> FALSE     <r:@R> => Value::from(0).to_expr(l..r).into(),
    <l:@L> <v:INT>   <r:@R> => Value::from(v).to_expr(l..r).into(),
    <l:@L> <v:HEX>   <r:@R> => Value::from(v).to_expr(l..r).into(),
    <l:@L> <v:OCT>   <r:@R> => Value::from(v).to_expr(l..r).into(),
    <l:@L> <v:BIN>   <r:@R> => Value::from(v).to_expr(l..r).into(),
    <l:@L> <v:FLOAT> <r:@R> => Value::from(v).to_expr(l..r).into(),
    <l:@L> <v:STR>   <r:@R> => Value::from(v).to_expr(l..r).into(),
    <l:@L> <n:NAME>  <r:@R> => Expr::Name (Name::Name { name: n, span: l..r }).into(),
    <l:@L> <n:ARG>   <r:@R> => Expr::Arg (Name::Name { name: n, span: l..r }).into(),
    <l:@L> <name:NAME> <r:@R> "(" <args:Exprs> ")" =>? match Repr::from_shape(&name, args.len()) {
        Some(repr) => Ok(Expr::Repr { repr, span: l..r, args }.into()),
        None => Err(ParseError::User { error: Diagnostic { kind: DiagnosticKind::UnrecognizedReporter(name), span: l..r } }),
    },
    <l:@L> <e:Term> "[" <i:Expr> "]" <r:@R> => BinOp::Of.to_expr(l..r, e, i).into(),
    <v:Term> "." <l:@L> <n:NAME> <r:@R> => Expr::Dot { lhs: v, rhs: n, rhs_span: l..r }.into(),
}

StructLiteral: Rrc<Expr> = <l:@L> <n:NAME> <r:@R> "{" <f:Comma<StructLiteralField>> "}" => Expr::StructLiteral { name: n, span: l..r, fields: f }.into();
StructLiteralField: StructLiteralField = <l:@L> <n:NAME> <r:@R> "=" <v:Expr> => StructLiteralField { name: n, span: l..r, value: v };

Name: Name = {
    <NameName>,
    <NameDotName>,
}

#[inline]
NameName: Name = <l:@L> <n:NAME> <r:@R> => Name::Name { name: n, span: l..r };
#[inline]
NameDotName: Name = <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> => Name::DotName { lhs: n, lhs_span: l..r, rhs: f, rhs_span: lf..rf };

SpannedComma<T>: Vec<(T, Span)> = {
    <mut v:SpannedComma<T>> "," <l:@L> <e:T> <r:@R> => {
        v.push((e, l..r));
        v
    },
    <l:@L> <e:T> <r:@R> => vec![(e, l..r)],
    => vec![],
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => {
        if let Some(e) = e {
            v.push(e);
        }
        v
    }
}

extern {
    type Location = usize;
    type Error = Diagnostic;
    enum Token {
        NAME           => Token::Name(<SmolStr>),
        ARG            => Token::Arg(<SmolStr>),
        MAC            => Token::Mac(<SmolStr>),
        BIN            => Token::Bin(<i64>),
        OCT            => Token::Oct(<i64>),
        INT            => Token::Int(<i64>),
        HEX            => Token::Hex(<i64>),
        FLOAT          => Token::Float(<f64>),
        STR            => Token::Str(<SmolStr>),
        CMD            => Token::Cmd(<SmolStr>),
        COSTUMES       => Token::Costumes,
        SOUNDS         => Token::Sounds,
        LOCAL          => Token::Local,
        PROC           => Token::Proc,
        NOWARP         => Token::NoWarp,
        ON             => Token::On,
        ONFLAG         => Token::OnFlag,
        ONKEY          => Token::OnKey,
        ONCLICK        => Token::OnClick,
        ONBACKDROP     => Token::OnBackdrop,
        ONLOUDNESS     => Token::OnLoudness,
        ONTIMER        => Token::OnTimer,
        ONCLONE        => Token::OnClone,
        IF             => Token::If,
        ELSE           => Token::Else,
        ELIF           => Token::Elif,
        UNTIL          => Token::Until,
        FOREVER        => Token::Forever,
        REPEAT         => Token::Repeat,
        ","            => Token::Comma,
        "("            => Token::LParen,
        ")"            => Token::RParen,
        "{"            => Token::LBrace,
        "}"            => Token::RBrace,
        "="            => Token::Assign,
        "=="           => Token::Eq,
        "++"           => Token::Increment,
        "--"           => Token::Decrement,
        "+="           => Token::AssignAdd,
        "-="           => Token::AssignSubtract,
        "*="           => Token::AssignMultiply,
        "/="           => Token::AssignDivide,
        "//="           => Token::AssignFloorDiv,
        "%="           => Token::AssignModulo,
        "&="           => Token::AssignJoin,
        "["            => Token::LBracket,
        "]"            => Token::RBracket,
        "."            => Token::Dot,
        "!="           => Token::Ne,
        "<"            => Token::Lt,
        ">"            => Token::Gt,
        "<="           => Token::Le,
        ">="           => Token::Ge,
        NOT            => Token::Not,
        AND            => Token::And,
        OR             => Token::Or,
        IN             => Token::In,
        "&"            => Token::Amp,
        "+"            => Token::Plus,
        "-"            => Token::Minus,
        "*"            => Token::Star,
        "/"            => Token::Slash,
        "//"            => Token::FloorDiv,
        "%"            => Token::Percent,
        ";"            => Token::Semicolon,
        LENGTH         => Token::Length,
        ROUND          => Token::Round,
        ABS            => Token::Abs,
        FLOOR          => Token::Floor,
        CEIL           => Token::Ceil,
        SQRT           => Token::Sqrt,
        SIN            => Token::Sin,
        COS            => Token::Cos,
        TAN            => Token::Tan,
        ASIN           => Token::Asin,
        ACOS           => Token::Acos,
        ATAN           => Token::Atan,
        LN             => Token::Ln,
        LOG            => Token::Log,
        ANTILN         => Token::Antiln,
        ANTILOG        => Token::Antilog,
        SHOW           => Token::Show,
        HIDE           => Token::Hide,
        ADD            => Token::Add,
        TO             => Token::To,
        DELETE         => Token::Delete,
        INSERT         => Token::Insert,
        AT             => Token::At,
        OF             => Token::Of,
        AS             => Token::As,
        ENUM           => Token::Enum,
        STRUCT         => Token::Struct,
        TRUE           => Token::True,
        FALSE          => Token::False,
        LIST           => Token::List,
    }
}
