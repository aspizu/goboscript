use crate::misc::SmolStr;
use logos::Span;
use lalrpop_util::ParseError;
use crate::ast::*;
use crate::blocks::*;
use crate::diagnostic::*;
use crate::lexer::token::*;
use crate::lexer::adaptor::*;
use crate::misc::*;

grammar<'a>(sprite: &'a mut Sprite);

pub Sprite = Declr*;

Declr: () = {
    ";",
    COSTUMES Comma<Costume> ";",
    SOUNDS Comma<Sound> ";",
    HIDE ";" => {
        sprite.hidden = true;
    },
    SET_X <x:Value> => {
        sprite.x_position = Some(x);
    },
    SET_Y <y:Value> => {
        sprite.y_position = Some(y);
    },
    SET_SIZE <size:Value> => {
        sprite.size = Some(size);
    },
    SET_VOLUME <volume:Value> => {
        sprite.volume = Some(volume);
    },
    POINT_IN_DIRECTION <direction:Value> => {
        sprite.direction = Some(direction);
    },
    SET_ROTATION_STYLE_LEFT_RIGHT ";" => {  
        sprite.rotation_style = RotationStyle::LeftRight;
    },
    SET_ROTATION_STYLE_ALL_AROUND ";" => {  
        sprite.rotation_style = RotationStyle::AllAround;
    },
    SET_ROTATION_STYLE_DO_NOT_ROTATE ";" => {  
        sprite.rotation_style = RotationStyle::DoNotRotate;
    },
    SET_LAYER_ORDER <layer_order:Value> => {
        sprite.layer_order = Some(layer_order);
    },
    <w:NOWARP?> PROC <l:@L> <n:NAME> <r:@R> <a:Comma<Arg>> <b:Stmts> => {
        sprite.add_proc(Proc::new(n.clone(), l..r, w.is_none()), a, b);
    },
    FUNC <l:@L> <n:NAME> <r:@R> "(" <a:Comma<Arg>> ")" <t:Type> <b:Stmts> => {
        sprite.add_func(Func::new(n.clone(), l..r, t), a, b);
    },
    <l:@L> ON <r:@R> <event:STR> <b:Stmts> => sprite.events.push(EventKind::On { event }.to_event(l..r, b)),
    <l:@L> ONFLAG <r:@R> <b:Stmts> => sprite.events.push(EventKind::OnFlag.to_event(l..r, b)),
    <l:@L> ONKEY <r:@R> <kl:@L> <key:STR> <kr:@R> <b:Stmts> => sprite.events.push(EventKind::OnKey { key, span: kl..kr }.to_event(l..r, b)),
    <l:@L> ONCLICK <r:@R> <b:Stmts> => sprite.events.push(EventKind::OnClick.to_event(l..r, b)),
    <l:@L> ONBACKDROP <r:@R> <kl:@L> <backdrop:STR> <kr:@R> <b:Stmts> => sprite.events.push(EventKind::OnBackdrop { backdrop, span: kl..kr }.to_event(l..r, b)),
    <l:@L> ONLOUDNESS <r:@R> ">" <value:BoxedIfExpr> <b:Stmts> => sprite.events.push(EventKind::OnLoudnessGt { value }.to_event(l..r, b)),
    <l:@L> ONTIMER <r:@R> ">" <value:BoxedIfExpr> <b:Stmts> => sprite.events.push(EventKind::OnTimerGt { value }.to_event(l..r, b)),
    <l:@L> ONCLONE <r:@R> <b:Stmts> => sprite.events.push(EventKind::OnClone.to_event(l..r, b)),
    STRUCT <l:@L> <name:NAME> <r:@R> "{" <fields:Comma<StructField>> "}" => {
        sprite.structs.insert(name.clone(), Struct::new(name, l..r, fields));
    },
    ENUM <l:@L> <name:NAME> <r:@R> "{" <variants:Comma<EnumVariant>> "}" => {
        sprite.enums.insert(name.clone(), Enum::new(name, l..r, variants));
    },
    VAR <type_:Type> <l:@L> <name:NAME> <r:@R> "=" <value:Value> ";" => {
        sprite.vars.insert(name.clone(), Var {
            name,
            span: l..r,
            type_,
            default: Some(value),
            is_cloud: false,
            is_used: false,

        });
    },
    CLOUD <l:@L> <name:NAME> <r:@R> ";" => {
        sprite.vars.insert(name.clone(), Var {
            name,
            span: l..r,
            type_: Type::Value,
            default: None,
            is_cloud: true,
            is_used: false,
        });
    },
    LIST <type_:Type> <l:@L> <name:NAME> <r:@R> ";" => {
        sprite.lists.insert(name.clone(), List::new(name, l..r, type_));
    },
    LIST <type_:Type> <l:@L> <name:NAME> <r:@R> "=" <cmd:Cmd> ";" => {
        sprite.lists.insert(name.clone(), List::new_cmd(name, l..r, type_, cmd));
    },
    LIST <type_:Type> <l:@L> <name:NAME> <r:@R> "=" "[" <default:Comma<Value>> "]" ";" => {
        sprite.lists.insert(name.clone(), List::new_array(name, l..r, type_, default));
    }
}

Cmd: Cmd = {
    <pl:@L> <program:NAME?> <pr:@R> <cl:@L> <cmd:CMD> <cr:@R> => {
        Cmd {
            program: program.map(|program| Program { name: program, span: pl..pr }),
            cmd,
            span: cl..cr 
        }
    }
}

EnumVariant: EnumVariant = {
    <l:@L> <name:NAME> <r:@R> => EnumVariant::new(name, l..r, None),
    <l:@L> <name:NAME> <r:@R> "=" <v:Value> => EnumVariant::new(name, l..r, Some(v)),
}

Costume: () = {
    <l:@L> <path:STR> <r:@R> <alias:(AS <STR>)?> => {
        sprite.costumes.push(Costume::new(path, alias, l..r));
    }
}

Sound: () = {
    <l:@L> <path:STR> <r:@R> <alias:(AS <STR>)?> => {
        sprite.sounds.push(Sound::new(path, alias, l..r));
    }
}

Stmts: Vec<Stmt> = "{" <(<Stmt> ";"*)*> "}";

Stmt: Stmt = {
    RETURN <value:BoxedExpr> ";" => Stmt::Return { value, visited: false },
    IF <cond:BoxedIfExpr> <if_body:Stmts> => {
        Stmt::Branch { cond, if_body, else_body: vec![] }
    },
    IF <cond:BoxedIfExpr> <if_body:Stmts> ELSE <else_body:Stmts> => {
        Stmt::Branch { cond, if_body, else_body }
    },
    IF <cond:BoxedIfExpr> <if_body:Stmts> <else_body:Elif> => {
        Stmt::Branch { cond, if_body, else_body: vec![else_body] }
    },
    REPEAT <times:BoxedIfExpr> <body:Stmts> => Stmt::Repeat { times, body },
    <l:@L> FOREVER <r:@R> <body:Stmts> => Stmt::Forever { body, span: l..r },
    UNTIL <cond:BoxedIfExpr> <body:Stmts> => Stmt::Until { cond, body },
    <type_:Type> <l:@L> <name:NAME> <r:@R> "=" <value:BoxedExpr> ";" => {
        Stmt::SetVar {
            name: Name::Name { name, span: l..r },
            value,
            type_,
            is_local: false,
            is_cloud: false,
        }
    },
    LOCAL <type_:Type> <l:@L> <name:NAME> <r:@R> "=" <value:BoxedExpr> ";" => {
        Stmt::SetVar {
            name: Name::Name { name, span: l..r },
            value,
            type_,
            is_local: true,
            is_cloud: false,
        }
    },
    CLOUD <l:@L> <name:NAME> <r:@R> "=" <value:BoxedExpr> ";" => {
        Stmt::SetVar {
            name: Name::Name { name, span: l..r },
            value,
            type_: Type::Value,
            is_local: false,
            is_cloud: true,
        }
    },
    <l:@L> <name:NAME> <r:@R> "++" ";" => Stmt::increment(Name::Name { name, span: l..r }),
    <l:@L> <name:NAME> <r:@R> "--" ";" => Stmt::decrement(Name::Name { name, span: l..r }),
    <l:@L> <name:NAME> <r:@R> "+=" <value:BoxedExpr> ";" => {
        Stmt::ChangeVar { name: Name::Name { name, span: l..r }, value }
    },
    <l:@L> <name:NAME> <r:@R> "-=" <value:Expr> ";" => {
        Stmt::augmented_assign(BinOp::Sub, name, l..r, value)
    },
    <l:@L> <name:NAME> <r:@R> "*=" <value:Expr> ";" => {
        Stmt::augmented_assign(BinOp::Mul, name, l..r, value)
    },
    <l:@L> <name:NAME> <r:@R> "/=" <value:Expr> ";" => {
        Stmt::augmented_assign(BinOp::Div, name, l..r, value)
    },
    <l:@L> <name:NAME> <r:@R> "//=" <value:Expr> ";" => {
        Stmt::augmented_assign(BinOp::FloorDiv, name, l..r, value)
    },
    <l:@L> <name:NAME> <r:@R> "%=" <value:Expr> ";" => {
        Stmt::augmented_assign(BinOp::Mod, name, l..r, value)
    },
    <l:@L> <name:NAME> <r:@R> "&=" <value:Expr> ";" => {
        Stmt::augmented_assign(BinOp::Join, name, l..r, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "." <fl:@L> <rhs:NAME> <fr:@R> "=" <value:BoxedExpr> ";" => {
        Stmt::SetVar {
            name: Name::DotName {
                lhs,
                lhs_span: l..r,
                rhs,
                rhs_span: fl..fr,
                is_generated: false,
            },
            value,
            type_: Type::Value,
            is_local: false,
            is_cloud: false,
        }
    },
    <l:@L> <name:NAME> <r:@R> "." <fl:@L> <field:NAME> <fr:@R> "++" ";" => {
        Stmt::increment(Name::DotName {
            lhs: name,
            lhs_span: l..r,
            rhs: field,
            rhs_span: fl..fr,
            is_generated: false,
        })
    },
    <l:@L> <name:NAME> <r:@R> "." <fl:@L> <field:NAME> <fr:@R> "--" ";" => {
        Stmt::decrement(Name::DotName {
            lhs: name,
            lhs_span: l..r,
            rhs: field,
            rhs_span: fl..fr,
            is_generated: false,
        })
    },
    <l:@L> <lhs:NAME> <r:@R> "." <fl:@L> <rhs:NAME> <fr:@R> "+=" <value:BoxedExpr> ";" => {
        Stmt::ChangeVar {
            name: Name::DotName {
                lhs,
                lhs_span: l..r,
                rhs,
                rhs_span: fl..fr,
                is_generated: false,
            },
            value,
        }
    },
    <l:@L> <lhs:NAME> <r:@R> "." <fl:@L> <rhs:NAME> <fr:@R> "-=" <value:Expr> ";" => {
        Stmt::augmented_field_assign(BinOp::Sub, lhs, l..r, rhs, fl..fr, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "." <fl:@L> <rhs:NAME> <fr:@R> "*=" <value:Expr> ";" => {
        Stmt::augmented_field_assign(BinOp::Mul, lhs, l..r, rhs, fl..fr, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "." <fl:@L> <rhs:NAME> <fr:@R> "/=" <value:Expr> ";" => {
        Stmt::augmented_field_assign(BinOp::Div, lhs, l..r, rhs, fl..fr, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "." <fl:@L> <rhs:NAME> <fr:@R> "//=" <value:Expr> ";" => {
        Stmt::augmented_field_assign(BinOp::FloorDiv, lhs, l..r, rhs, fl..fr, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "." <fl:@L> <rhs:NAME> <fr:@R> "%=" <value:Expr> ";" => {
        Stmt::augmented_field_assign(BinOp::Mod, lhs, l..r, rhs, fl..fr, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "." <fl:@L> <rhs:NAME> <fr:@R> "&=" <value:Expr> ";" => {
        Stmt::augmented_field_assign(BinOp::Join, lhs, l..r, rhs, fl..fr, value)
    },
    SHOW <name:NameName> ";" => Stmt::Show(name),
    HIDE <name:NameName> ";" => Stmt::Hide(name),
    <l:@L> SHOW <r:@R> ";" => Stmt::Block { block: Block::Show, span: l..r, args: vec![], kwargs: Default::default() },
    <l:@L> HIDE <r:@R> ";" => Stmt::Block { block: Block::Hide, span: l..r, args: vec![], kwargs: Default::default() },
    ADD <value:BoxedExpr> TO <name:NameName> ";" => Stmt::AddToList { name, value },
    INSERT <value:BoxedExpr> AT <name:NameName> "[" <index:BoxedExpr> "]" ";" => {
        Stmt::InsertAtList { name, index, value }
    },
    DELETE <name:NameName> ";" => Stmt::DeleteList(name),
    DELETE <name:NameName> "[" <index:BoxedExpr> "]" ";" => {
        Stmt::DeleteListIndex { name, index }
    },
    <name:NameName> "[" <index:BoxedExpr> "]" "=" <value:BoxedExpr> ";" => {
        Stmt::SetListIndex { name, index, value }
    },
    <name:NameName> "[" <index:Expr> "]" "++" ";" => Stmt::increment_index(name, index),
    <name:NameName> "[" <index:Expr> "]" "--" ";" => Stmt::decrement_index(name, index),
    <name:NameName> "[" <index:Expr> "]" "+=" <value:Expr> ";" => {
        Stmt::augmented_index_assign(BinOp::Add, name, index, value)
    },
    <name:NameName> "[" <index:Expr> "]" "-=" <value:Expr> ";" => {
        Stmt::augmented_index_assign(BinOp::Sub, name, index, value)
    },
    <name:NameName> "[" <index:Expr> "]" "*=" <value:Expr> ";" => {
        Stmt::augmented_index_assign(BinOp::Mul, name, index, value)
    },
    <name:NameName> "[" <index:Expr> "]" "/=" <value:Expr> ";" => {
        Stmt::augmented_index_assign(BinOp::Div, name, index, value)
    },
    <name:NameName> "[" <index:Expr> "]" "//=" <value:Expr> ";" => {
        Stmt::augmented_index_assign(BinOp::FloorDiv, name, index, value)
    },
    <name:NameName> "[" <index:Expr> "]" "%=" <value:Expr> ";" => {
        Stmt::augmented_index_assign(BinOp::Mod, name, index, value)
    },
    <name:NameName> "[" <index:Expr> "]" "&=" <value:Expr> ";" => {
        Stmt::augmented_index_assign(BinOp::Join, name, index, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "[" <index:BoxedExpr> "]" "." <fl:@L> <rhs:NAME> <fr:@R> "=" <value:BoxedExpr> ";" => {
        Stmt::SetListIndex {
            name: Name::DotName { lhs, lhs_span: l..r, rhs, rhs_span: fl..fr, is_generated: false },
            index,
            value
        }
    },
    <l:@L> <lhs:NAME> <r:@R> "[" <index:Expr> "]" "." <fl:@L> <rhs:NAME> <fr:@R> "++" ";" => {
        let name = Name::DotName { lhs, lhs_span: l..r, rhs, rhs_span: fl..fr, is_generated: false };
        Stmt::increment_index(name, index)
    },
    <l:@L> <lhs:NAME> <r:@R> "[" <index:Expr> "]" "." <fl:@L> <rhs:NAME> <fr:@R> "--" ";" => {
        let name = Name::DotName { lhs, lhs_span: l..r, rhs, rhs_span: fl..fr, is_generated: false };
        Stmt::decrement_index(name, index)
    },
    <l:@L> <lhs:NAME> <r:@R> "[" <index:Expr> "]" "." <fl:@L> <rhs:NAME> <fr:@R> "+=" <value:Expr> ";" => {
        let name = Name::DotName { lhs, lhs_span: l..r, rhs, rhs_span: fl..fr, is_generated: false };
        Stmt::augmented_index_assign(BinOp::Add, name, index, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "[" <index:Expr> "]" "." <fl:@L> <rhs:NAME> <fr:@R> "-=" <value:Expr> ";" => {
        let name = Name::DotName { lhs, lhs_span: l..r, rhs, rhs_span: fl..fr, is_generated: false };
        Stmt::augmented_index_assign(BinOp::Sub, name, index, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "[" <index:Expr> "]" "." <fl:@L> <rhs:NAME> <fr:@R> "*=" <value:Expr> ";" => {
        let name = Name::DotName { lhs, lhs_span: l..r, rhs, rhs_span: fl..fr, is_generated: false };
        Stmt::augmented_index_assign(BinOp::Mul, name, index, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "[" <index:Expr> "]" "." <fl:@L> <rhs:NAME> <fr:@R> "/=" <value:Expr> ";" => {
        let name = Name::DotName { lhs, lhs_span: l..r, rhs, rhs_span: fl..fr, is_generated: false };
        Stmt::augmented_index_assign(BinOp::Div, name, index, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "[" <index:Expr> "]" "." <fl:@L> <rhs:NAME> <fr:@R> "//=" <value:Expr> ";" => {
        let name = Name::DotName { lhs, lhs_span: l..r, rhs, rhs_span: fl..fr, is_generated: false };
        Stmt::augmented_index_assign(BinOp::FloorDiv, name, index, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "[" <index:Expr> "]" "." <fl:@L> <rhs:NAME> <fr:@R> "%=" <value:Expr> ";" => {
        let name = Name::DotName { lhs, lhs_span: l..r, rhs, rhs_span: fl..fr, is_generated: false };
        Stmt::augmented_index_assign(BinOp::Mod, name, index, value)
    },
    <l:@L> <lhs:NAME> <r:@R> "[" <index:Expr> "]" "." <fl:@L> <rhs:NAME> <fr:@R> "&=" <value:Expr> ";" => {
        let name = Name::DotName { lhs, lhs_span: l..r, rhs, rhs_span: fl..fr, is_generated: false };
        Stmt::augmented_index_assign(BinOp::Join, name, index, value)
    },
    <l:@L> <name:NAME> <r:@R> <args:Kwargs> ";" => {
        let (args, kwargs) = split_args(args);
        match Block::from_shape(&name, args.len()) {
            Some(block) => Stmt::Block { block, span: l..r, args, kwargs },
            None => Stmt::ProcCall { name, span: l..r, args, kwargs },
        }
    },
    <l:@L> SET_X <r:@R> <arg:Expr> ";" => Stmt::Block { block: Block::SetX, span: l..r, args: vec![arg], kwargs: Default::default() },
    <l:@L> SET_Y <r:@R> <arg:Expr> ";" => Stmt::Block { block: Block::SetY, span: l..r, args: vec![arg], kwargs: Default::default() },
    <l:@L> SET_SIZE <r:@R> <arg:Expr> ";" => Stmt::Block { block: Block::SetSize, span: l..r, args: vec![arg], kwargs: Default::default() },
    <l:@L> POINT_IN_DIRECTION <r:@R> <arg:Expr> ";" => Stmt::Block { block: Block::PointInDirection, span: l..r, args: vec![arg], kwargs: Default::default() },
    <l:@L> SET_VOLUME <r:@R> <arg:Expr> ";" => Stmt::Block { block: Block::SetVolume, span: l..r, args: vec![arg], kwargs: Default::default() },
    <l:@L> LOG <r:@R> <arg:Expr> ";" => Stmt::ProcCall { name: "log".into(), span: l..r, args: vec![arg], kwargs: Default::default() },
    <l:@L> SET_ROTATION_STYLE_LEFT_RIGHT <r:@R> ";" => Stmt::Block { block: Block::SetRotationStyleLeftRight, span: l..r, args: vec![], kwargs: Default::default() },
    <l:@L> SET_ROTATION_STYLE_ALL_AROUND <r:@R> ";" => Stmt::Block { block: Block::SetRotationStyleAllAround, span: l..r, args: vec![], kwargs: Default::default() },
    <l:@L> SET_ROTATION_STYLE_DO_NOT_ROTATE <r:@R> ";" => Stmt::Block { block: Block::SetRotationStyleDoNotRotate, span: l..r, args: vec![], kwargs: Default::default() },
}

Elif: Stmt = {
    ELIF <cond:BoxedIfExpr> <if_body:Stmts> => {
        Stmt::Branch { cond, if_body, else_body: vec![] }
    },
    ELIF <cond:BoxedIfExpr> <if_body:Stmts> <else_body:Elif> => {
        Stmt::Branch { cond, if_body, else_body: vec![else_body] }
    },
    ELIF <cond:BoxedIfExpr> <if_body:Stmts> ELSE <else_body:Stmts> => {
        Stmt::Branch { cond, if_body, else_body }
    },
}

#[inline]
BoxedExpr: Box<Expr> = <expr:Expr> => Box::new(expr);

#[inline]
BoxedIfExpr: Box<Expr> = <expr:IfExpr> => Box::new(expr);

#[inline]
Exprs: Vec<Expr> = <Comma<Expr>>;

#[inline]
Kwargs: Vec<(Option<(SmolStr, Span)>, Expr)> = <Comma<Kwarg>>;

#[inline]
Kwarg: (Option<(SmolStr, Span)>, Expr) = {
    <l:@L> <name:(<NAME> ":")?> <r:@R> <value:Expr> => {
        (name.map(|name| (name, l..r)), value)
    }
}

Expr: Expr = {
    #[precedence(level="1")]
    Term,
    StructLiteral,
    #[precedence(level="2")] #[assoc(side="right")]
    <l:@L> "-"     <e:Expr> <r:@R> => UnOp::Minus  .to_expr(l..r, e),
    <l:@L> NOT     <e:Expr> <r:@R> => UnOp::Not    .to_expr(l..r, e),
    <l:@L> LENGTH  <e:Expr> <r:@R> => UnOp::Length .to_expr(l..r, e),
    <l:@L> ROUND   <e:Expr> <r:@R> => UnOp::Round  .to_expr(l..r, e),
    <l:@L> ABS     <e:Expr> <r:@R> => UnOp::Abs    .to_expr(l..r, e),
    <l:@L> FLOOR   <e:Expr> <r:@R> => UnOp::Floor  .to_expr(l..r, e),
    <l:@L> CEIL    <e:Expr> <r:@R> => UnOp::Ceil   .to_expr(l..r, e),
    <l:@L> SQRT    <e:Expr> <r:@R> => UnOp::Sqrt   .to_expr(l..r, e),
    <l:@L> SIN     <e:Expr> <r:@R> => UnOp::Sin    .to_expr(l..r, e),
    <l:@L> COS     <e:Expr> <r:@R> => UnOp::Cos    .to_expr(l..r, e),
    <l:@L> TAN     <e:Expr> <r:@R> => UnOp::Tan    .to_expr(l..r, e),
    <l:@L> ASIN    <e:Expr> <r:@R> => UnOp::Asin   .to_expr(l..r, e),
    <l:@L> ACOS    <e:Expr> <r:@R> => UnOp::Acos   .to_expr(l..r, e),
    <l:@L> ATAN    <e:Expr> <r:@R> => UnOp::Atan   .to_expr(l..r, e),
    <l:@L> LN      <e:Expr> <r:@R> => UnOp::Ln     .to_expr(l..r, e),
    <l:@L> LOG     <e:Expr> <r:@R> => UnOp::Log    .to_expr(l..r, e),
    <l:@L> ANTILN  <e:Expr> <r:@R> => UnOp::AntiLn .to_expr(l..r, e),
    <l:@L> ANTILOG <e:Expr> <r:@R> => UnOp::AntiLog.to_expr(l..r, e),
    #[precedence(level="3")] #[assoc(side="left")]
    <l:@L> <lhs:Expr> "*" <rhs:Expr> <r:@R> => BinOp::Mul     .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:Expr> "/" <rhs:Expr> <r:@R> => BinOp::Div     .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:Expr> "//"<rhs:Expr> <r:@R> => BinOp::FloorDiv.to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:Expr> "%" <rhs:Expr> <r:@R> => BinOp::Mod     .to_expr(l..r, lhs, rhs),
    #[precedence(level="4")] #[assoc(side="left")]
    <l:@L> <lhs:Expr> "+" <rhs:Expr> <r:@R> => BinOp::Add     .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:Expr> "-" <rhs:Expr> <r:@R> => BinOp::Sub     .to_expr(l..r, lhs, rhs),
    #[precedence(level="5")] #[assoc(side="left")]
    <l:@L> <lhs:Expr> "<" <rhs:Expr> <r:@R> => BinOp::Lt      .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:Expr> "<="<rhs:Expr> <r:@R> => BinOp::Le      .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:Expr> ">" <rhs:Expr> <r:@R> => BinOp::Gt      .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:Expr> ">="<rhs:Expr> <r:@R> => BinOp::Ge      .to_expr(l..r, lhs, rhs),
    #[precedence(level="6")] #[assoc(side="left")]
    <l:@L> <lhs:Expr> "&" <rhs:Expr> <r:@R> => BinOp::Join    .to_expr(l..r, lhs, rhs),
    // <lhs:Expr> "|>" <l:@L> <name:NAME> <r:@R> "(" <mut args:Exprs> ")" => {
    //     args.insert(0, lhs);
    //     if let Some(repr) = Repr::from_shape(&name, args.len()) {
    //         Expr::Repr { repr, span: l..r, args }
    //     } else {
    //         Expr::FuncCall { name: name, span: l..r, args: args }
    //     }
    // },
    #[precedence(level="7")] #[assoc(side="left")]
    <l:@L> <lhs:Expr>  IN <rhs:Expr> <r:@R> => BinOp::In      .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:Expr> NOT IN <rhs:Expr> <r:@R> => UnOp::Not.to_expr(l..r, BinOp::In.to_expr(l..r, lhs, rhs)),
    <l:@L> <lhs:Expr> "=="<rhs:Expr> <r:@R> => BinOp::Eq      .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:Expr> "!="<rhs:Expr> <r:@R> => BinOp::Ne      .to_expr(l..r, lhs, rhs),
    #[precedence(level="8")] #[assoc(side="left")]
    <l:@L> <lhs:Expr> AND <rhs:Expr> <r:@R> => BinOp::And     .to_expr(l..r, lhs, rhs),
    #[precedence(level="9")] #[assoc(side="left")]
    <l:@L> <lhs:Expr> OR  <rhs:Expr> <r:@R> => BinOp::Or      .to_expr(l..r, lhs, rhs),
}

IfExpr: Expr = {
    #[precedence(level="1")]
    Term,
    #[precedence(level="2")] #[assoc(side="right")]
    <l:@L> "-"     <e:IfExpr> <r:@R> => UnOp::Minus  .to_expr(l..r, e),
    <l:@L> NOT     <e:IfExpr> <r:@R> => UnOp::Not    .to_expr(l..r, e),
    <l:@L> LENGTH  <e:IfExpr> <r:@R> => UnOp::Length .to_expr(l..r, e),
    <l:@L> ROUND   <e:IfExpr> <r:@R> => UnOp::Round  .to_expr(l..r, e),
    <l:@L> ABS     <e:IfExpr> <r:@R> => UnOp::Abs    .to_expr(l..r, e),
    <l:@L> FLOOR   <e:IfExpr> <r:@R> => UnOp::Floor  .to_expr(l..r, e),
    <l:@L> CEIL    <e:IfExpr> <r:@R> => UnOp::Ceil   .to_expr(l..r, e),
    <l:@L> SQRT    <e:IfExpr> <r:@R> => UnOp::Sqrt   .to_expr(l..r, e),
    <l:@L> SIN     <e:IfExpr> <r:@R> => UnOp::Sin    .to_expr(l..r, e),
    <l:@L> COS     <e:IfExpr> <r:@R> => UnOp::Cos    .to_expr(l..r, e),
    <l:@L> TAN     <e:IfExpr> <r:@R> => UnOp::Tan    .to_expr(l..r, e),
    <l:@L> ASIN    <e:IfExpr> <r:@R> => UnOp::Asin   .to_expr(l..r, e),
    <l:@L> ACOS    <e:IfExpr> <r:@R> => UnOp::Acos   .to_expr(l..r, e),
    <l:@L> ATAN    <e:IfExpr> <r:@R> => UnOp::Atan   .to_expr(l..r, e),
    <l:@L> LN      <e:IfExpr> <r:@R> => UnOp::Ln     .to_expr(l..r, e),
    <l:@L> LOG     <e:IfExpr> <r:@R> => UnOp::Log    .to_expr(l..r, e),
    <l:@L> ANTILN  <e:IfExpr> <r:@R> => UnOp::AntiLn .to_expr(l..r, e),
    <l:@L> ANTILOG <e:IfExpr> <r:@R> => UnOp::AntiLog.to_expr(l..r, e),
    #[precedence(level="3")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr> "*" <rhs:IfExpr> <r:@R> => BinOp::Mul     .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:IfExpr> "/" <rhs:IfExpr> <r:@R> => BinOp::Div     .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:IfExpr> "//"<rhs:IfExpr> <r:@R> => BinOp::FloorDiv.to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:IfExpr> "%" <rhs:IfExpr> <r:@R> => BinOp::Mod     .to_expr(l..r, lhs, rhs),
    #[precedence(level="4")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr> "+" <rhs:IfExpr> <r:@R> => BinOp::Add     .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:IfExpr> "-" <rhs:IfExpr> <r:@R> => BinOp::Sub     .to_expr(l..r, lhs, rhs),
    #[precedence(level="5")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr> "<" <rhs:IfExpr> <r:@R> => BinOp::Lt      .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:IfExpr> "<="<rhs:IfExpr> <r:@R> => BinOp::Le      .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:IfExpr> ">" <rhs:IfExpr> <r:@R> => BinOp::Gt      .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:IfExpr> ">="<rhs:IfExpr> <r:@R> => BinOp::Ge      .to_expr(l..r, lhs, rhs),
    #[precedence(level="6")] #[assoc(side="right")]
    <l:@L> <lhs:IfExpr> "&" <rhs:IfExpr> <r:@R> => BinOp::Join    .to_expr(l..r, lhs, rhs),
    // <lhs:IfExpr> "|>" <l:@L> <name:NAME> <r:@R> "(" <mut args:Exprs> ")" => {
    //     args.insert(0, lhs);
    //     if let Some(repr) = Repr::from_shape(&name, args.len()) {
    //         Expr::Repr { repr, span: l..r, args }
    //     } else {
    //         Expr::FuncCall { name: name, span: l..r, args: args }
    //     }
    // },
    #[precedence(level="7")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr>  IN <rhs:IfExpr> <r:@R> => BinOp::In      .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:IfExpr> NOT IN <rhs:IfExpr> <r:@R> => UnOp::Not.to_expr(l..r, BinOp::In.to_expr(l..r, lhs, rhs)),
    <l:@L> <lhs:IfExpr> "=="<rhs:IfExpr> <r:@R> => BinOp::Eq      .to_expr(l..r, lhs, rhs),
    <l:@L> <lhs:IfExpr> "!="<rhs:IfExpr> <r:@R> => BinOp::Ne      .to_expr(l..r, lhs, rhs),
    #[precedence(level="8")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr> AND <rhs:IfExpr> <r:@R> => BinOp::And     .to_expr(l..r, lhs, rhs),
    #[precedence(level="9")] #[assoc(side="left")]
    <l:@L> <lhs:IfExpr> OR  <rhs:IfExpr> <r:@R> => BinOp::Or      .to_expr(l..r, lhs, rhs),
}

Term: Expr = {
    "(" <Expr> ")",
    <v:Value> => v.0.to_expr(v.1),
    <l:@L> <n:NAME> <r:@R> => Expr::Name(Name::Name { name: n, span: l..r }),
    <l:@L> <n:ARG> <r:@R> => Expr::Arg(Name::Name { name: n, span: l..r }),
    <l:@L> <name:NAME> <r:@R> "(" <args:Kwargs> ")" => {
        let (args, kwargs) = split_args(args);
        if let Some(repr) = Repr::from_shape(&name, args.len()) {
            Expr::Repr { repr, span: l..r, args }
        } else {
            Expr::FuncCall { name: name, span: l..r, args, kwargs }
        }
    },
    <l:@L> <term:Term> "[" <index:Expr> "]" <r:@R> => BinOp::Of.to_expr(l..r, term, index),
    <lhs:Term> "." <l:@L> <rhs:NAME> <r:@R> => {
        Expr::Dot { lhs: Box::new(lhs), rhs, rhs_span: l..r }
    }
}

StructLiteral: Expr = {
    <l:@L> <name:NAME> <r:@R> "{" <fields:Comma<StructLiteralField>> "}" => {
        Expr::StructLiteral { name, span: l..r, fields }
    }
}

StructLiteralField: StructLiteralField = {
    <l:@L> <name:NAME> <r:@R> ":" <value:BoxedExpr> => {
        StructLiteralField { name, span: l..r, value }
    }
};

Value: (Value, Span) = { 
    <l:@L> TRUE      <r:@R> => (Value::from(1.0), l..r),
    <l:@L> FALSE     <r:@R> => (Value::from(0.0), l..r),
    <l:@L> <v:INT>   <r:@R> => (Value::from(v), l..r),
    <l:@L> <v:HEX>   <r:@R> => (Value::from(v), l..r),
    <l:@L> <v:OCT>   <r:@R> => (Value::from(v), l..r),
    <l:@L> <v:BIN>   <r:@R> => (Value::from(v), l..r),
    <l:@L> <v:FLOAT> <r:@R> => (Value::from(v), l..r),
    <l:@L> <v:STR>   <r:@R> => (Value::from(v), l..r),
}

#[inline]
NameName: Name = <l:@L> <n:NAME> <r:@R> => Name::Name { name: n, span: l..r };

#[inline]
NameDotName: Name = <l:@L> <n:NAME> <r:@R> "." <lf:@L> <f:NAME> <rf:@R> => {
    Name::DotName { lhs: n, lhs_span: l..r, rhs: f, rhs_span: lf..rf, is_generated: false }
};

#[inline]
Type: Type = {
    <l:@L> <name:NAME> <r:@R> => Type::Struct { name, span: l..r },
    => Type::Value,
}

#[inline]
Arg: Arg = {
    <type_:Type> <l:@L> <name:NAME> <r:@R> <default:("=" <Value>)?> => Arg::new(name, l..r, type_, default),
}

#[inline]
StructField: (SmolStr, Span, Option<(Value, Span)>) = {
    <l:@L> <name:NAME> <r:@R> <default:("=" <Value>)?> => (name, l..r, default),
}

SpannedComma<T>: Vec<(T, Span)> = {
    <mut v:SpannedComma<T>> "," <l:@L> <e:T> <r:@R> => {
        v.push((e, l..r));
        v
    },
    <l:@L> <e:T> <r:@R> => vec![(e, l..r)],
    => vec![],
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => {
        if let Some(e) = e {
            v.push(e);
        }
        v
    }
}

extern {
    type Location = usize;
    type Error = Diagnostic;
    enum Token {
        NAME           => Token::Name(<SmolStr>),
        ARG            => Token::Arg(<SmolStr>),
        BIN            => Token::Bin(<i64>),
        OCT            => Token::Oct(<i64>),
        INT            => Token::Int(<i64>),
        HEX            => Token::Hex(<i64>),
        FLOAT          => Token::Float(<f64>),
        STR            => Token::Str(<SmolStr>),
        CMD            => Token::Cmd(<SmolStr>),
        COSTUMES       => Token::Costumes,
        SOUNDS         => Token::Sounds,
        LOCAL          => Token::Local,
        PROC           => Token::Proc,
        FUNC           => Token::Func,
        RETURN         => Token::Return,
        NOWARP         => Token::NoWarp,
        ON             => Token::On,
        ONFLAG         => Token::OnFlag,
        ONKEY          => Token::OnKey,
        ONCLICK        => Token::OnClick,
        ONBACKDROP     => Token::OnBackdrop,
        ONLOUDNESS     => Token::OnLoudness,
        ONTIMER        => Token::OnTimer,
        ONCLONE        => Token::OnClone,
        IF             => Token::If,
        ELSE           => Token::Else,
        ELIF           => Token::Elif,
        UNTIL          => Token::Until,
        FOREVER        => Token::Forever,
        REPEAT         => Token::Repeat,
        ","            => Token::Comma,
        "("            => Token::LParen,
        ")"            => Token::RParen,
        "{"            => Token::LBrace,
        "}"            => Token::RBrace,
        "="            => Token::Assign,
        ":"            => Token::Colon,
        "=="           => Token::Eq,
        "++"           => Token::Increment,
        "--"           => Token::Decrement,
        "+="           => Token::AssignAdd,
        "-="           => Token::AssignSubtract,
        "*="           => Token::AssignMultiply,
        "/="           => Token::AssignDivide,
        "//="          => Token::AssignFloorDiv,
        "%="           => Token::AssignModulo,
        "&="           => Token::AssignJoin,
        "["            => Token::LBracket,
        "]"            => Token::RBracket,
        "."            => Token::Dot,
        "!="           => Token::Ne,
        "<"            => Token::Lt,
        ">"            => Token::Gt,
        "<="           => Token::Le,
        ">="           => Token::Ge,
        NOT            => Token::Not,
        AND            => Token::And,
        OR             => Token::Or,
        IN             => Token::In,
        "&"            => Token::Amp,
        "+"            => Token::Plus,
        "-"            => Token::Minus,
        "*"            => Token::Star,
        "/"            => Token::Slash,
        "//"           => Token::FloorDiv,
        "%"            => Token::Percent,
        ";"            => Token::Semicolon,
        LENGTH         => Token::Length,
        ROUND          => Token::Round,
        ABS            => Token::Abs,
        FLOOR          => Token::Floor,
        CEIL           => Token::Ceil,
        SQRT           => Token::Sqrt,
        SIN            => Token::Sin,
        COS            => Token::Cos,
        TAN            => Token::Tan,
        ASIN           => Token::Asin,
        ACOS           => Token::Acos,
        ATAN           => Token::Atan,
        LN             => Token::Ln,
        LOG            => Token::Log,
        ANTILN         => Token::Antiln,
        ANTILOG        => Token::Antilog,
        SHOW           => Token::Show,
        HIDE           => Token::Hide,
        ADD            => Token::Add,
        TO             => Token::To,
        DELETE         => Token::Delete,
        INSERT         => Token::Insert,
        AT             => Token::At,
        OF             => Token::Of,
        AS             => Token::As,
        ENUM           => Token::Enum,
        STRUCT         => Token::Struct,
        TRUE           => Token::True,
        FALSE          => Token::False,
        LIST           => Token::List,
        CLOUD          => Token::Cloud,
        "|>"           => Token::Pipe,
        SET_X          => Token::SetX,
        SET_Y          => Token::SetY,
        SET_SIZE       => Token::SetSize,
        POINT_IN_DIRECTION => Token::PointInDirection,
        SET_VOLUME     => Token::SetVolume,
        SET_ROTATION_STYLE_LEFT_RIGHT => Token::SetRotationStyleLeftRight,
        SET_ROTATION_STYLE_ALL_AROUND => Token::SetRotationStyleAllAround,
        SET_ROTATION_STYLE_DO_NOT_ROTATE => Token::SetRotationStyleDoNotRotate,
        SET_LAYER_ORDER => Token::SetLayerOrder,
        VAR => Token::Var,
    }
}
