{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"README","text":"<p>\u2605 Star the repo to support the project!</p> <p> </p> <p></p> <p>Installation and documentation</p> <p>goboscript is a text-based programming language that compiles to Scratch. Write Scratch projects in text, and compile it into a <code>.sb3</code> file -- which can be opened in the Scratch editor, TurboWarp or be uploaded to the Scratch website.</p> <p>goboscript makes developing advanced Scratch projects FAST. goboscript syntax is concise and easy to read. Use a version-control system such as git. Use VS Code or your favourite text-editor. Share code by copy-pasting. Use the standard library. Refactor code using search and replace. Write scripts in other programming languages to generate goboscript code. goboscript allows you to integrate external tooling and workflows, such as using a script to generate costumes for a text rendering engine,  or loading in images into lists. goboscript has a powerful macro system similar to C. The standard library includes many macros for frequently used patterns, such as converting R, G, B values into a single integer. goboscript performs optimization, removes unused code, and detects problems &amp; mistakes.</p> <p>goboscript is more than just an 1:1 mapping of Scratch blocks to text, it has abstractions such as:</p> <ul> <li>Custom data-types using Structs and Enums.</li> <li>Functions that return values</li> <li>Default parameters for Functions &amp; Procedures</li> <li>Operators such as: <code>!=</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>//</code> (Floor division), <code>not in</code></li> <li>Local variables (Function-scoped)</li> <li>and more...</li> </ul> <p>All these abstractions are compiled down to regular Scratch code.</p> <p></p>"},{"location":"#scratch-forum-topic","title":"Scratch Forum topic","text":""},{"location":"#sister-projects","title":"Sister Projects","text":"<ul> <li>std: The goboscript standard library.</li> <li>backpack: Package manager for goboscript.</li> <li>sb2gs: Decompile Scratch projects (.sb3) into goboscript projects (.gs)</li> <li>goboscript.ide: Online IDE for goboscript, runs projects instantly in the browser.</li> </ul>"},{"location":"#other-text-based-scratch-projects","title":"Other Text-Based Scratch projects","text":"<p>For a complete list of all text-based scratch projects, see https://scratch.mit.edu/discuss/topic/792714/</p> <p>@retr0id first presented the demoscene discord with his <code>boiga</code> project (1). <code>boiga</code> works by exporting Python data structures which nicely represent Scratch code in the form of Python code. Soon after, I created my own re-implementation of <code>boiga</code> called <code>gobomatic</code>. <code>gobomatic</code> was more feature-complete and supported more Scratch blocks and features than <code>boiga</code> did, and it had some syntactical differences. The python version of <code>goboscript</code> used <code>gobomatic</code> as a dependency to generate Scratch projects. Now, <code>gobomatic</code> is abandoned and <code>goboscript</code> was ported to Rust.</p> <p>(1): https://github.com/DavidBuchanan314/boiga</p>"},{"location":"#contributing","title":"Contributing","text":"<p>goboscript welcomes contributions in the form of Pull Requests. No LLM generated code will be accepted.</p> <p>goboscript is written in Rust. You'll need to install the Rust toolchain for development.</p> <p>Note</p> <p>To install goboscript, follow instructions at https://aspizu.github.io/goboscript/install/ These instructions are for people who want to develop goboscript itself.</p> <pre><code>git clone https://github.com/aspizu/goboscript\ncd goboscript\n</code></pre>"},{"location":"#development","title":"Development","text":"<p>After cloning the repository, run goboscript locally from the repository root with:</p> <pre><code>cargo run -- build your_project/\n</code></pre> <p>But, to make development easier, and to validate the generated Scratch project - use the <code>tools/run</code> script:</p> <pre><code>tools/run compile\n</code></pre> <p>This assumes that you have set-up a testing project at <code>playground/</code>. It will compile the project, validate it using the schemas from <code>scratch-parser</code>. If the validation fails, Scratch will refuse to load the project. To further debug the project, the generated <code>project.json</code> file is extracted from the <code>.sb3</code> file in the <code>playground/</code> directory.</p> <p>Lets say that you modified the generated project in the Scratch editor or Turbowarp, and you want to look at the <code>project.json</code>. You can extract it with:</p> <pre><code>tools/run uncompile\n</code></pre> <p>Lets say that goboscript produced a broken project, and you are able to fix it by hand - by modifying the <code>project.json</code>. You can add back the <code>project.json</code> to the <code>.sb3</code> file with:</p> <pre><code>tools/run patch\n</code></pre> <p>If you want to validate some <code>.sb3</code> file, use:</p> <pre><code>tools/run check path/to/project.sb3\n</code></pre>"},{"location":"#foss-hack-25","title":"FOSS HACK 25","text":"<p>goboscript was one of the first-place winners of FOSS HACK 25, and was awarded a 50,000 Rs. prize. FOSS HACK 25 was a open-source hackathon conducted on 22nd - 23rd February 2025 by the FOSS United Foundation. During the 48-hour hackathon, I had worked on several goboscript issues and feature implementation. Thank you FOSS United for the platform and opportunity.</p>"},{"location":"#star-history","title":"Star History","text":""},{"location":"configuration/","title":"Configuration","text":"<p>goboscript uses a <code>goboscript.toml</code> configuration file to store project-specific configuration.</p>"},{"location":"configuration/#standard-library-version","title":"Standard Library Version","text":"<p>If not provided, the latest version is picked (Updates fetched daily)</p> <pre><code>std = \"2.1.0\" # default is unset\n</code></pre>"},{"location":"configuration/#sprites-layer-order","title":"Sprites layer order","text":"<p>Specify the order in which sprites are layered, by default the order is undefined.</p> <pre><code>layers = [\"sprite_name_1\", \"sprite_name_2\"]\n</code></pre>"},{"location":"configuration/#bitmap-resolution","title":"Bitmap Resolution","text":"<p>Controls the resolution handling for bitmap images (PNG, BMP) in your project.</p> <pre><code>bitmap_resolution = 2 # default is 1\n</code></pre>"},{"location":"configuration/#how-bitmap-resolution-works","title":"How Bitmap Resolution Works","text":"<p>Scratch internally uses high-resolution bitmaps where each screen pixel corresponds to 4 image pixels (2x scale factor). This setting determines how goboscript handles this scaling:</p> <ul> <li> <p><code>bitmap_resolution = 1</code> (default): Your images are stored as-is, and Scratch automatically scales them up by 2x when the project loads. Use normal-sized images (e.g., 480x360 for full stage backdrops).</p> </li> <li> <p><code>bitmap_resolution = 2</code>: Your images are treated as high-resolution and displayed at half their pixel size. You must provide double-sized images (e.g., 960x720 for full stage backdrops) to achieve the same visual size.</p> </li> </ul> <p>Note</p> <p>This setting only affects bitmap formats (PNG, BMP). Vector formats (SVG) are unaffected.</p>"},{"location":"configuration/#turbowarp-options","title":"Turbowarp options","text":"<p>goboscript can generate a turbowarp configuration comment inside the Stage. https://docs.turbowarp.org/advanced-settings</p>"},{"location":"configuration/#frame-rate","title":"Frame Rate","text":"<pre><code>frame_rate = 60 # default is 30\n</code></pre>"},{"location":"configuration/#max-clones","title":"Max Clones","text":""},{"location":"configuration/#default","title":"Default","text":"<pre><code>max_clones = 300\n</code></pre>"},{"location":"configuration/#infinite-clones","title":"Infinite Clones","text":"<pre><code>max_clones = inf\n</code></pre>"},{"location":"configuration/#no-miscellaneous-limits","title":"No Miscellaneous Limits","text":"<pre><code>no_miscellaneous_limits = true # default is false\n</code></pre>"},{"location":"configuration/#no-sprite-fencing","title":"No Sprite Fencing","text":"<pre><code>no_sprite_fencing = true # default is false\n</code></pre>"},{"location":"configuration/#frame-interpolation","title":"Frame Interpolation","text":"<pre><code>frame_interpolation = true # default is false\n</code></pre>"},{"location":"configuration/#high-quality-pen","title":"High Quality Pen","text":"<pre><code>high_quality_pen = true # default is false\n</code></pre>"},{"location":"configuration/#stage-width-height","title":"Stage Width &amp; Height","text":"<pre><code>stage_width = 640 # default is 480\nstage_height = 480 # default is 360\n</code></pre>"},{"location":"install/","title":"Install","text":""},{"location":"install/#auto-install","title":"Auto Install","text":"<p>Recommended method to install. Also installs sb2gs and backpack.</p>"},{"location":"install/#unix","title":"Unix","text":"<pre><code>curl -fsSL https://raw.githubusercontent.com/aspizu/goboscript/refs/heads/main/install.sh | sh\n</code></pre>"},{"location":"install/#windows","title":"Windows","text":"<pre><code>iwr https://raw.githubusercontent.com/aspizu/goboscript/refs/heads/main/install.ps1 | iex\n</code></pre>"},{"location":"install/#install-from-source","title":"Install from source","text":"<p>This installs the latest bleeding-edge version from the git repository. You will need <code>git</code>, and the rust toolchain installed.</p> <pre><code>git clone https://github.com/aspizu/goboscript\ncd goboscript\ncargo install --path .\n</code></pre> <p>To update the installation:</p> <pre><code>cd goboscript\ngit pull\ncargo install --path .\n</code></pre>"},{"location":"install/#install-from-source-using-cargo","title":"Install from source (using cargo)","text":"<p>This installs the latest bleeding-edge version from the git repository with a single command.</p> <pre><code>cargo install --git https://github.com/aspizu/goboscript\n</code></pre> <p>To update the installation:</p> <pre><code>cargo install --git https://github.com/aspizu/goboscript --force\n</code></pre>"},{"location":"standard-library/","title":"Standard Library","text":"<p>The standard library is a collection of useful procedures, functions and macros that can be used in any goboscript project.</p> <p>Repository: https://github.com/goboscript/std</p>"},{"location":"standard-library/#standard-library-headers","title":"Standard library headers","text":"<p>Include a header using the <code>%include</code> directive.</p> <pre><code>%include std/math\n</code></pre> <p>goboscript's dead code elimination will remove any unused procedures and functions from the compiled project.</p>"},{"location":"standard-library/#documentation","title":"Documentation","text":"<p>There is no hand-written documentation currently, so refer to AI-generated documentation.</p> <p>https://deepwiki.com/goboscript/std</p>"},{"location":"editor-integration/notepad%2B%2B/","title":"Notepad++","text":""},{"location":"editor-integration/notepad%2B%2B/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Copy the <code>/editors/notepad++/goboscript.udl.xml</code> file to the Notepad++ user defined language directory.</p> <p>Language &gt; User Defined Language &gt; Open User Defined Language Folder...</p>"},{"location":"editor-integration/sublime-text/","title":"Sublime Text","text":""},{"location":"editor-integration/sublime-text/#sublime-text","title":"Sublime Text","text":"<p>The Sublime Text extension provides syntax highlighting.</p>"},{"location":"editor-integration/sublime-text/#install-from-source","title":"Install from source","text":"<p>in Sublime Text, click <code>Preferences &gt; Browse Packages...</code> to open up the Packages folder, and then copy <code>editors/sublime/goboscript.sublime-syntax</code> into the Packages folder</p>"},{"location":"editor-integration/turbowarp-desktop/","title":"TurboWarp Desktop","text":""},{"location":"editor-integration/turbowarp-desktop/#instant-project-reload","title":"Instant Project Reload","text":"<p>This will add a keyboard shortcut to instantly reload the project in TurboWarp Desktop using Ctrl+B</p> <p>Open the user data folder using:  <code>Settings</code> &gt; <code>Desktop Settings</code> &gt; <code>Open User Data</code></p> <p>Create a file called <code>userscript.js</code> and add the following code:</p> <pre><code>window.addEventListener('keyup', async (event) =&gt; {\n  if (!(event.key === 'b' &amp;&amp; event.ctrlKey)) return\n  event.preventDefault()\n  const id = await EditorPreload.getInitialFile()\n  if (id === null) return\n  const file = await EditorPreload.getFile(id)\n  await vm.loadProject(file.data)\n})\n</code></pre> <p>Restart TurboWarp Desktop including all open windows.</p> <p>Thanks to GarboMuffin for this code.</p>"},{"location":"editor-integration/vscode/","title":"Visual Studio Code","text":""},{"location":"editor-integration/vscode/#visual-studio-code","title":"Visual Studio Code","text":"<p>The VSCode extension provides code snippets and syntax highlighting.</p>"},{"location":"editor-integration/vscode/#install-from-source","title":"Install from source","text":"<p>You will need <code>npm</code> installed.</p> <pre><code># Inside the root of the goboscript git repository:\ncd editors/code\nnpm install\nnpm run package\n</code></pre> <p>This will output a <code>goboscript.vsix</code> file in the <code>editors/code</code> directory. You can install it by pressing Ctrl+Shift+P and typing <code>Extensions: Install from VSIX...</code>.</p>"},{"location":"editor-integration/vscode/#configure-build-task","title":"Configure Build Task","text":"<p>You can configure the goboscript build task to get diagnostics in vscode.</p> <p>Add to <code>.vscode/tasks.json</code>:</p> <pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"goboscript-build\",\n      \"problemMatcher\": [\"$rustc\"],\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n      },\n      \"label\": \"Build .sb3\"\n    }\n  ]\n}\n</code></pre> <p>Either press Ctrl+Shift+B or run <code>Tasks: Run Task</code> and select <code>Build .sb3</code>.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>The goboscript compiler is a command-line program. You can create a new project using the <code>new</code> command. (run <code>goboscript new --help</code> for more information)</p>"},{"location":"getting-started/#create-a-new-project","title":"Create a new project","text":"<p>Create a new folder, and make sure that your working-directory is set to that folder.</p> <pre><code>goboscript new\n</code></pre> <p>This will create a new project with the following structure:</p> <pre><code>.\n\u251c\u2500\u2500 blank.svg\n\u251c\u2500\u2500 main.gs\n\u251c\u2500\u2500 stage.gs\n\u2514\u2500\u2500 goboscript.toml\n</code></pre> <p>Depending on what options you chose, it might create a <code>goboscript.toml</code> configuration file.</p> <p>Each <code>.gs</code> file holds the code for a sprite, the name of the sprite is the name of the file without the <code>.gs</code> extension.</p> <p><code>stage.gs</code> holds the code for the Stage. Scratch does not allow you to name a sprite <code>Stage</code>, so creating a file with the name <code>Stage.gs</code> is invalid. As goboscript uses <code>stage.gs</code> for the Stage, you also cannot name a sprite <code>stage</code> (in lowercase).</p> <p><code>blank.svg</code> is a blank costume. You can see that both the main sprite and the Stage have the line:</p> <pre><code>costumes \"blank.svg\";\n</code></pre> <p>This is used to add a costume to a sprite (or the Stage), see language/costumes for more information.</p>"},{"location":"getting-started/#compile-the-project","title":"Compile the project","text":"<p>To compile the project, run the following command:</p> <pre><code>goboscript build\n</code></pre> <p>This will compile the project into a <code>.sb3</code> file. The <code>.sb3</code> file will be placed in the project directory. It will have the same name as the project directory.</p> <p>Run <code>goboscript build --help</code> for more information.</p>"},{"location":"getting-started/basic-examples/","title":"Basic Examples","text":"<p>Let's start with simple examples of Goboscript syntax.</p> <pre><code># This is a single-line comment\n\n# Numbers\nvar integer = 42;        # Integer\nvar float_num = 3.14;    # Float\nvar binary = 0b1010;     # Binary (value: 10)\nvar hex = 0xFF;          # Hexadecimal (value: 255)\nvar octal = 0o777;       # Octal (value: 511)\n\n# Strings\nvar greeting = \"Hello, World!\";\nvar escaped = \"Quotes: \\\"example\\\"\";\nvar unicode = \"\\u1234\";  # Unicode character\n\n# Booleans\nvar flag = true;         # Will be compiled as 1\nvar not_flag = false;    # Will be compiled as 0\n</code></pre>"},{"location":"getting-started/basic-examples/#variables-and-operators","title":"Variables and Operators","text":"<pre><code># Variable declaration and assignment\nx = 10;\ny = 20;\nsum = x + y;         # Addition: 30\ndiff = x - y;        # Subtraction: -10\nproduct = x * y;     # Multiplication: 200\nquotient = y / x;    # Division: 2\nfloor_div = y // x;  # Floor division: 2\nremainder = y % x;   # Modulo: 0\ntext = \"Hello\" &amp; \" World\"; # String concatenation: \"Hello World\"\n\n# Compound assignment\nx += 5;                  # x = x + 5\ny -= 3;                  # y = y - 3\nproduct *= 2;            # product = product * 2\nquotient /= 4;           # quotient = quotient / 4\ntext &amp;= \"!\";             # text = text &amp; \"!\"\n\n# Comparison operators\nis_equal = x == y;   # Equal to\nnot_equal = x != y;  # Not equal to\ngreater = x &gt; y;     # Greater than\nless = x &lt; y;        # Less than\ngreater_equal = x &gt;= y; # Greater than or equal to\nless_equal = x &lt;= y;    # Less than or equal to\n\n# Logical operators\nboth = x &gt; 0 and y &gt; 0;  # Logical AND\neither = x &gt; 0 or y &lt; 0; # Logical OR\ninverse = not x &gt; 0;     # Logical NOT\n</code></pre>"},{"location":"getting-started/basic-examples/#control-flow","title":"Control Flow","text":"<pre><code>condition = true;\nx = 10;\n\n# Simple if statement\nif x &gt; 5 {\n    say \"x is greater than 5\";\n}\n\n# If-else statement\nif x % 2 == 0 {\n    say \"x is even\";\n} else {\n    say \"x is odd\";\n}\n\n# If-elif-else statement\nif x &lt; 0 {\n    say \"x is negative\";\n} elif x == 0 {\n    say \"x is zero\";\n} else {\n    say \"x is positive\";\n}\n\n# Boolean coercion\nif timer() {  # Equivalent to: if timer() == 1\n    say \"Timer is active\";\n}\n</code></pre>"},{"location":"getting-started/basic-examples/#loops","title":"Loops","text":"<pre><code># Repeat loop (fixed number of iterations)\nrepeat 5 {\n    say \"Repeated message\";\n}\n\n# Repeat with counter\nvar i = 1;\nrepeat 10 {\n    say \"Iteration \" &amp; i;\n    i++;\n}\n\n# Until loop (continues until condition is true)\nvar counter = 0;\nuntil counter &gt; 5 {\n    say \"Counter: \" &amp; counter;\n    counter++;\n}\n\n# Forever loop (infinite loop)\nforever {\n    say \"Press stop to exit\";\n    if key space pressed? {\n        stop_this_script;\n    }\n}\n</code></pre>"},{"location":"getting-started/basic-examples/#functions-and-procedures","title":"Functions and Procedures","text":""},{"location":"getting-started/basic-examples/#procedures","title":"Procedures","text":"<pre><code># Define a procedure\nproc greet_user {\n    say \"Hello, user!\";\n}\n\n# Procedure with parameters\nproc personalized_greeting name {\n    say \"Hello, \" &amp; $name &amp; \"!\";\n}\n\n# Procedure with local variables\nproc calculate_sum a, b {\n    local result = $a + $b;\n    say \"Sum: \" &amp; result;\n}\n\nonflag {\n    # Call procedures\n    greet_user;\n    personalized_greeting \"John\";\n    calculate_sum 5, 10;\n}\n</code></pre>"},{"location":"getting-started/basic-examples/#functions","title":"Functions","text":"<p>Functions are similar to procedures but return values.</p> <pre><code># Define a function\nfunc add(x, y) {\n    return $x + $y;\n}\n\n# Function with type\nfunc create_greeting(name) {\n    return \"Hello, \" &amp; $name &amp; \"!\";\n}\n\nonflag {\n    message = create_greeting(\"World\");\n    say message;  # Outputs: \"Hello, World!\"\n}\n</code></pre>"},{"location":"getting-started/basic-examples/#data-structures","title":"Data Structures","text":""},{"location":"getting-started/basic-examples/#lists","title":"Lists","text":"<pre><code># Declare an empty list\nlist my_list;\n\n# Add items to a list\nadd \"apple\" to my_list;\nadd \"banana\" to my_list;\nadd \"cherry\" to my_list;\n\n# Access list items (1-indexed)\nfirst_item = my_list[1];  # \"apple\"\n\n# Replace items\nmy_list[2] = \"blueberry\";     # Replace \"banana\" with \"blueberry\"\n\n# Insert at position\ninsert \"apricot\" at my_list[1]; # Insert at the beginning\n\n# Delete an item\ndelete my_list[3];\n\n# Check length\nsize = length my_list;\n\n# Check if an item is in the list\nif \"cherry\" in my_list {\n    say \"Found cherry!\";\n}\n\n# Get random item\nrandom_fruit = my_list[\"random\"];\n\n# Clear the list\ndelete my_list;\n\n# Load list from file\nlist data = file ```data.txt```;\n</code></pre>"},{"location":"getting-started/basic-examples/#structures-and-enums","title":"Structures and Enums","text":"<pre><code># Define a struct\nstruct Point {\n    x,\n    y\n}\n\n# Create a struct instance\nPoint p = Point { x: 10, y: 20 };\n\n# Access struct fields\nsay \"Coordinates: \" &amp; p.x &amp; \", \" &amp; p.y;\n\n# Define an enum\nenum Direction {\n    North,  # 0\n    East,   # 1\n    South,  # 2\n    West    # 3\n}\n\n# Use enum values\ncurrent_direction = Direction.North;\nif current_direction == Direction.North {\n    say \"Heading north\";\n}\n\n# Enum with explicit values\nenum Color {\n    Red = \"red\",\n    Green = \"green\",\n    Blue = \"blue\"\n}\n\nsay \"Selected color: \" &amp; Color.Red;\n</code></pre>"},{"location":"language/control-flow/","title":"Control Flow","text":""},{"location":"language/control-flow/#repeat-n-times","title":"repeat n times","text":"<pre><code>repeat n {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#repeat-until-condition","title":"repeat until condition","text":"<pre><code>until condition == true {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#forever-loop","title":"forever loop","text":"<pre><code>forever {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#if","title":"if","text":"<pre><code>if condition {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#if-else","title":"if else","text":"<pre><code>if condition {\n    # code\n}\nelse {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#if-elif","title":"if elif","text":"<pre><code>if condition {\n    # code\n}\nelif condition {\n    # code\n}\n</code></pre>"},{"location":"language/costumes/","title":"Costumes","text":"<p>You can add costumes to a sprite by specifying their file paths relative to the project directory.</p> <pre><code>costumes \"path/to/costume.svg\";\n</code></pre>"},{"location":"language/costumes/#listing-multiple-costumes","title":"Listing Multiple Costumes","text":"<p>To add multiple costumes, separate their file paths with commas. Costumes will appear in the order you list them in the <code>costumes</code> statement.</p> <pre><code>costumes \"path/to/costume1.svg\", \"path/to/costume2.svg\";\n</code></pre> <p>Each costume's name is taken from the file name without its extension.</p>"},{"location":"language/costumes/#renaming-costumes","title":"Renaming Costumes","text":"<p>You can rename a costume using the <code>as</code> keyword.</p> <pre><code>costumes \"path/to/costume.svg\" as \"new name\";\n</code></pre>"},{"location":"language/costumes/#using-wildcards-globs","title":"Using Wildcards (Globs)","text":"<p>You can use wildcards to include multiple costumes, such as all <code>.svg</code> files in a directory. Use the <code>*</code> wildcard for this.</p> <pre><code>costumes \"path/to/costumes/*.svg\";\n</code></pre> <p>Costumes added this way are sorted alphabetically.</p>"},{"location":"language/costumes/#generating-costumes-for-text-engines-and-case-detection","title":"Generating costumes for text engines and case detection","text":"<p>Scratch compares strings case-insensitively. Switching costumes is, however, case-sensitive. This can be utilized to detect the case of a character by first switching to the costume named by the character, then using the costume number to detect the case.</p> <p>For example, if you have a costume named \"A\" at position 1, and a costume named \"a\" at position 2, you can use the following code to detect the case of a character:</p> <pre><code>switch_costume char;\nif costume_number() == 1 {\n    say \"upper case A\";\n} else {\n    say \"lower case a\";\n}\n</code></pre> <p>Its useful to have one costume for each printable character in the ASCII set. This will allow you to get the ASCII value of any printable character.</p> <p>Writing <code>costumes \"blank.svg\" as \"A\", \"blank.svg\" as \"B\" ...</code> for each printable character is a pain.</p> <p>goboscript provides a special declaration for generating such costumes automatically.</p> <pre><code>costumes \"blank.svg\" as \"@ascii/PREFIX\";\n</code></pre> <p>This will generate costumes for all printable characters in the ASCII set, with the prefix \"PREFIX\". For example, if the prefix is \"A\", the costumes will be named \"A0\", \"A1\", etc.</p> <p>If you do not wish to have a prefix, leave it blank. (i.e. <code>@ascii/</code>)</p> <p>Given that these are placed at the beginning of the costumes list, you can get the ASCII value of a character by adding <code>31</code> to the costume number.</p>"},{"location":"language/custom-blocks/","title":"Custom Blocks","text":"<p>Custom blocks, also known as procedures can take input arguments, but unlike functions, they do not return values.</p>"},{"location":"language/custom-blocks/#declaring-a-custom-block","title":"Declaring a Custom Block","text":"<p>Use the <code>proc</code> keyword to define a custom block. List argument names separated by  commas.</p> <pre><code>proc my_procedure arg1, arg2 {\n    say $arg1;\n    say $arg2;\n}\n</code></pre> <p>Use the <code>nowarp</code> keyword before <code>proc</code> to make the custom block run without screen refresh unchecked.</p> <pre><code>nowarp proc my_procedure arg1, arg2 {\n    say $arg1;\n    say $arg2;\n}\n</code></pre>"},{"location":"language/custom-blocks/#struct-typed-arguments","title":"Struct-Typed Arguments","text":"<p>You can take in struct values by specifying the type name before the argument name.</p> <pre><code>proc process_item Item item_data {\n    say $item_data.name;\n}\n</code></pre>"},{"location":"language/custom-blocks/#default-argument-values","title":"Default Argument Values","text":"<p>Just like functions, procedures support default argument values. This allows a  caller to skip certain arguments when calling the block.</p> <pre><code>proc greet name = \"world\" {\n    say \"Hello, \" &amp; $name &amp; \"!\";\n}\n</code></pre> <ul> <li><code>greet</code> \u2192 says \"Hello, world!\"</li> <li><code>greet \"aspizu\"</code> \u2192 says \"Hello, aspizu!\"</li> </ul>"},{"location":"language/custom-blocks/#keyword-arguments","title":"Keyword Arguments","text":"<p>Procedures can also be called using keyword arguments, specifying each parameter by  name. This improves readability, especially when not all parameters are passed or when  calling with many arguments.</p> <pre><code>proc introduce name, title = \"developer\", location = \"unknown\" {\n    say $name &amp; \" is a \" &amp; $title &amp; \" from \" &amp; $location;\n}\n</code></pre> <p>Call it using keyword arguments:</p> <pre><code>introduce name: \"aspizu\", location: \"India\";\n# Output: \"aspizu is a developer from India\"\n</code></pre> <p>Keyword arguments can be used in any order, as long as required arguments are  provided:</p> <pre><code>introduce location: \"Berlin\", name: \"Kai\";\n# Output: \"Kai is a developer from Berlin\"\n</code></pre>"},{"location":"language/custom-blocks/#calling-custom-blocks","title":"Calling Custom Blocks","text":"<p>Call a procedure using positional or keyword arguments:</p> <pre><code># Positional\nmy_procedure \"hello\", 3;\n\n# Keyword\nmy_procedure arg2: 3, arg1: \"hello\";\n</code></pre> <p>Use <code>$argname</code> inside the block to access the arguments.</p>"},{"location":"language/enums/","title":"Enums","text":"<p>Enum variants will automatically be assigned a value starting from 0.</p> <pre><code>enum Direction {\n    North, #    0\n    East,  #    1\n    South, #    2\n    West   #    3\n}\n</code></pre> <p>An explicit value can be given to an enum variant.</p> <pre><code>enum Direction {\n    North = \"North\",\n    East = \"East\",\n    South = \"South\",\n    West = \"West\"\n}\n</code></pre> <p>Explicit values and implicit values can be mixed.</p> <pre><code>enum Direction {\n    A = \"A\",\n    B, #       0\n    C = \"C\",\n    D, #       1\n    E = 2,\n    F, #       3\n\n}\n</code></pre>"},{"location":"language/enums/#get-enum-value","title":"Get enum value","text":"<pre><code>say Direction.North;\n</code></pre>"},{"location":"language/functions/","title":"Functions","text":"<p>Functions are reusable procedures (custom blocks) that can return values, including  primitives or structs. Functions always run in Run without screen refresh mode and  must only be called from other Run without screen refresh procedures or  functions to prevent undefined behavior.</p> <p>Each function must end with a <code>return</code> statement. Using <code>stop_this_script</code> inside  a function is undefined behavior.</p>"},{"location":"language/functions/#declaring-a-function","title":"Declaring a Function","text":"<p>Use the <code>func</code> keyword to define a function. Optionally, include a return type for  functions that return a struct.</p> <pre><code>func my_function(x, y) {\n    return $x + $y;\n}\n</code></pre> <pre><code>func my_function(x, y) MyStruct {\n    return MyStruct { ... };\n}\n</code></pre>"},{"location":"language/functions/#returning-struct-variables","title":"Returning Struct Variables","text":"<p>Functions can return struct variables by specifying the struct type as the return type.</p>"},{"location":"language/functions/#basic-struct-return-example","title":"Basic Struct Return Example","text":"<pre><code>struct Vector {\n    x,\n    y\n}\n\nfunc vec_add(Vector lhs, Vector rhs) Vector {\n    return Vector {\n        x: $lhs.x + $rhs.x,\n        y: $lhs.y + $rhs.y\n    };\n}\n</code></pre>"},{"location":"language/functions/#using-the-returned-struct","title":"Using the Returned Struct","text":"<pre><code># Create vectors\nVector vec1 = Vector { x: 10, y: 20 };\nVector vec2 = Vector { x: 5, y: 15 };\n\n# Call function that returns a struct\nVector result = vec_add(vec1, vec2);\n\n# Access the returned struct's fields\nsay result.x; # Outputs: 15\nsay result.y; # Outputs: 35\n</code></pre> <p>Note</p> <p>When returning struct variables from functions, the return type must be explicitly specified when returning a struct</p>"},{"location":"language/functions/#default-argument-values","title":"Default Argument Values","text":"<p>Function parameters can have default values, allowing callers to omit them:</p> <pre><code>func greet(name = \"world\") {\n    return \"Hello, \" &amp; $name &amp; \"!\";\n}\n</code></pre> <ul> <li><code>greet()</code> returns <code>\"Hello, world!\"</code></li> <li><code>greet(\"aspizu\")</code> returns <code>\"Hello, aspizu!\"</code></li> </ul>"},{"location":"language/functions/#calling-a-function","title":"Calling a Function","text":"<p>Functions are called by name with argument values:</p> <pre><code>say my_function(1, 2);\n</code></pre>"},{"location":"language/functions/#keyword-arguments","title":"Keyword Arguments","text":"<p>You can also call functions using keyword arguments, which specify parameter names  explicitly. This is useful when using default arguments or calling functions with many   parameters:</p> <pre><code>greet(name: \"aspizu\")\n</code></pre> <p>This behaves the same as <code>greet(\"aspizu\")</code>, but makes the call more readable\u2014especially  when multiple parameters are involved:</p> <pre><code>func introduce(name, title = \"developer\", location = \"unknown\") {\n    return $name &amp; \" is a \" &amp; $title &amp; \" from \" &amp; $location;\n}\n</code></pre> <p>Call it with keyword arguments:</p> <pre><code>introduce(name: \"aspizu\", location: \"India\")\n# Equivalent to: introduce(\"aspizu\", \"developer\", \"India\")\n</code></pre> <p>Note</p> <p>Keyword arguments can be used in any order, as long as the required parameters are provided:</p> <pre><code>introduce(location: \"Berlin\", name: \"Kai\");\n# Still valid\n</code></pre>"},{"location":"language/hat-blocks/","title":"Hat Blocks","text":""},{"location":"language/hat-blocks/#when-green-flag-clicked","title":"When Green Flag Clicked","text":"<pre><code>onflag {\n    # code\n}\n</code></pre> <pre><code>when green flag clicked\n</code></pre>"},{"location":"language/hat-blocks/#when-key-pressed","title":"When Key Pressed","text":"<pre><code>onkey \"up arrow\" {\n   # code \n}\n</code></pre> <pre><code>when [up arrow v] key pressed\n</code></pre>"},{"location":"language/hat-blocks/#when-this-sprite-clicked","title":"When This Sprite Clicked","text":"<pre><code>onclick {\n    # code\n}\n</code></pre> <pre><code>when this sprite clicked\n</code></pre>"},{"location":"language/hat-blocks/#when-backdrop-switches-to","title":"When Backdrop Switches To","text":"<pre><code>onbackdrop \"backdrop\" {\n    # code\n}\n</code></pre> <pre><code>when backdrop switches to [backdrop v]\n</code></pre>"},{"location":"language/hat-blocks/#when-loudness","title":"When Loudness &gt;","text":"<pre><code>onloudness &gt; 100 {\n    # code\n}\n</code></pre> <pre><code>when [loudness v] &gt; (100)\n</code></pre>"},{"location":"language/hat-blocks/#when-timer","title":"When Timer &gt;","text":"<pre><code>ontimer &gt; 100 {\n    # code\n}\n</code></pre> <pre><code>when [timer v] &gt; (100)\n</code></pre>"},{"location":"language/hat-blocks/#when-i-start-as-a-clone","title":"When I Start As A Clone","text":"<pre><code>onclone {\n    # code\n}\n</code></pre> <pre><code>when I start as a clone\n</code></pre>"},{"location":"language/hat-blocks/#when-i-receive-message","title":"When I Receive Message","text":"<pre><code>on \"message name\" {\n    # code\n}\n</code></pre> <pre><code>when I receive [message name v]\n</code></pre>"},{"location":"language/lists/","title":"Lists","text":"<p>The same rules apply for lists as for variables regarding for all sprites and for this sprite only.</p>"},{"location":"language/lists/#declaration","title":"Declaration","text":"<pre><code>list list_name;\n</code></pre>"},{"location":"language/lists/#with-default-values","title":"With default values","text":"<pre><code>list list_name = [1, 2, 3];\n</code></pre> <pre><code>list type_name list_name;\n</code></pre>"},{"location":"language/lists/#operations","title":"Operations","text":""},{"location":"language/lists/#add-item-to-list","title":"Add item to list","text":"<pre><code>add value to list_name;\n</code></pre>"},{"location":"language/lists/#delete-item-from-list-at-index","title":"Delete item from list at index","text":"<pre><code>delete list_name[index];\n</code></pre>"},{"location":"language/lists/#delete-all-items-from-list","title":"Delete all items from list","text":"<pre><code>delete list_name;\n</code></pre>"},{"location":"language/lists/#insert-item-at-index-in-list","title":"Insert item at index in list","text":"<pre><code>insert value at list_name[index];\n</code></pre>"},{"location":"language/lists/#replace-item-at-index-in-list","title":"Replace item at index in list","text":"<pre><code>list_name[index] = value;\n</code></pre>"},{"location":"language/lists/#get-item-at-index-in-list","title":"Get item at index in list","text":"<pre><code>value = list_name[index];\n</code></pre>"},{"location":"language/lists/#get-index-of-item-in-list","title":"Get index of item in list","text":"<pre><code>index = item in list_name;\n</code></pre>"},{"location":"language/lists/#get-length-of-list","title":"Get length of list","text":"<pre><code>len = length list_name;\n</code></pre>"},{"location":"language/lists/#check-if-item-is-in-list","title":"Check if item is in list","text":"<pre><code>if value in list_name {\n    ...\n}\n</code></pre>"},{"location":"language/lists/#showhide-list-monitor","title":"Show/Hide List Monitor","text":"<pre><code>show list_name;\n</code></pre> <pre><code>hide list_name;\n</code></pre>"},{"location":"language/lists/#get-randomlast-item-in-list","title":"Get random/last item in list","text":"<pre><code>value = list_name[\"random\"];\n</code></pre> <pre><code>value = list_name[\"last\"];\n</code></pre>"},{"location":"language/lists/#compound-assignment","title":"Compound Assignment","text":"Operator Implementation <code>list_name[index]++;</code> <code>list_name[index]--;</code> <code>list_name[index] += y;</code> <code>list_name[index] -= y;</code> <code>list_name[index] *= y;</code> <code>list_name[index] /= y;</code> <code>list_name[index] //= y;</code> <code>list_name[index] %= y;</code> <code>list_name[index] &amp;= y;</code>"},{"location":"language/macros/","title":"Macros","text":"<p>goboscript has a C-like preprocessor. This allows you to define macros and include files.</p> <p>Note</p> <p>The preprocessor directives start with a <code>%</code> character. The <code>%</code> character must always appear at the start of a line. There cannot be any indentation before the <code>%</code> character.</p>"},{"location":"language/macros/#include","title":"Include","text":"<p>Include the contents of a file.</p> <pre><code>%include path/to/file.gs\n</code></pre> <p>The <code>.gs</code> extension is optional. If not specified (recommended), the file extension will be added automatically.</p> <p>If the include path is a directory, the file inside the directory with the same name as the directory will be included.</p> <p>By default, the include path is relative to the project root directory. To include a file relative to the current file, use <code>./</code> or <code>../</code></p>"},{"location":"language/macros/#define","title":"Define","text":"<p>Define a macro. That identifier will be substituted with the subsequent text.</p> <pre><code>%define macro_name replacement text\n</code></pre>"},{"location":"language/macros/#define-with-arguments","title":"Define with arguments","text":"<p>Define a macro with arguments. The arguments will be substituted with the tokens from the callsite.</p> <pre><code>%define macro_name(arg1, arg2) replacement text\n</code></pre> <p>You can use a backslash <code>\\</code> at the end of a line to continue the replacement text onto the next line:</p> <pre><code>%define long_macro this is a very long \\\n                   replacement text that spans \\\n                   multiple lines\n</code></pre>"},{"location":"language/macros/#remove-a-macro-definition","title":"Remove a macro definition","text":"<pre><code>%undef macro_name\n</code></pre>"},{"location":"language/macros/#conditional-compilation","title":"Conditional compilation","text":"<pre><code>%if macro_name\n    code\n%endif\n</code></pre> <pre><code>%if not macro_name\n    code\n%endif\n</code></pre>"},{"location":"language/macros/#concatenate-tokens","title":"Concatenate Tokens","text":"<pre><code>CONCAT(prefix, suffix) # becomes prefixsuffix\n</code></pre>"},{"location":"language/operators/","title":"Operators","text":""},{"location":"language/operators/#unary-operators","title":"Unary Operators","text":"Operator Implementation <code>not x == true</code> <code>length x</code> <code>round x</code> <code>abs x</code> <code>floor x</code> <code>ceil x</code> <code>sqrt x</code> <code>sin x</code> <code>cos x</code> <code>tan x</code> <code>asin x</code> <code>acos x</code> <code>atan x</code> <code>ln x</code> <code>log x</code> <code>antiln x</code> <code>antilog x</code>"},{"location":"language/operators/#binary-operators","title":"Binary Operators","text":"Operator Implementation <code>x + y</code> <code>x - y</code> <code>x * y</code> <code>x / y</code> <code>x // y</code> <code>x % y</code> <code>x &amp; y</code> <code>x == y</code> <code>x != y</code> <code>x &lt; y</code> <code>x &lt;= y</code> <code>x &gt; y</code> <code>x &gt;= y</code> <code>x == true and y == true</code> <code>x == true or y == true</code> <code>x in y</code> <code>x not in y</code> <code>x[y]</code>"},{"location":"language/operators/#reporters","title":"Reporters","text":""},{"location":"language/operators/#pick-random-to","title":"pick random () to ()","text":"<pre><code>random(x, y)\n</code></pre> <pre><code>(pick random (x) to (y))\n</code></pre>"},{"location":"language/operators/#contains","title":"() contains ()","text":"<pre><code>contains(string, substring)\n</code></pre> <pre><code>&lt;(string) contains (substring)?&gt;\n</code></pre>"},{"location":"language/reporters/","title":"Reporters","text":"<p>The general syntax for reporters is:</p> <pre><code>reporter_name(arg1, arg2)\n</code></pre>"},{"location":"language/sounds/","title":"Sounds","text":"<p>Note</p> <p>Scratch only supports MP3 and WAV files. Other formats will (as of now) not raise a warning or error, and the project will refuse to load in Scratch.</p> <p>You can add sounds to a sprite by specifying their file paths relative to the project directory.</p> <pre><code>sounds \"path/to/sound.mp3\";\n</code></pre>"},{"location":"language/sounds/#listing-multiple-sounds","title":"Listing Multiple Sounds","text":"<p>To add multiple sounds, separate their file paths with commas. Sounds will appear in the order you list them in the <code>sounds</code> statement.</p> <pre><code>sounds \"path/to/sound1.mp3\", \"path/to/sound2.wav\";\n</code></pre> <p>Each sound's name is taken from the file name without its extension.</p>"},{"location":"language/sounds/#renaming-sounds","title":"Renaming Sounds","text":"<p>You can rename a sound using the <code>as</code> keyword.</p> <pre><code>sounds \"path/to/sound.mp3\" as \"new name\";\n</code></pre>"},{"location":"language/sounds/#using-wildcards-globs","title":"Using Wildcards (Globs)","text":"<p>You can use wildcards to include multiple sounds, such as all <code>.mp3</code> files in a directory. Use the <code>*</code> wildcard for this.</p> <pre><code>sounds \"path/to/sounds/*.mp3\";\n</code></pre> <p>Sounds added this way are sorted alphabetically.</p>"},{"location":"language/sprites/","title":"Sprites","text":"<p>A sprite is a <code>.gs</code> file in the root of the project directory, all other <code>.gs</code> files (which are inside sub-directories of the project directory, or outside of the project directory, are not sprites.) are header files.</p>"},{"location":"language/sprites/#properties","title":"Properties","text":"<p>Sprite properties can be set using statements similar to blocks which set those properties at runtime.</p> <p>Note</p> <p>These statements are top-level, outside any declaration block.</p>"},{"location":"language/sprites/#sprite-default-x-position","title":"Sprite default X position","text":"<pre><code>set_x 100;\n</code></pre>"},{"location":"language/sprites/#sprite-default-y-position","title":"Sprite default Y position","text":"<pre><code>set_y 100;\n</code></pre>"},{"location":"language/sprites/#sprite-default-size","title":"Sprite default size","text":"<pre><code>set_size 100;\n</code></pre>"},{"location":"language/sprites/#sprite-default-direction","title":"Sprite default direction","text":"<pre><code>point_in_direction 100;\n</code></pre>"},{"location":"language/sprites/#sprite-default-volume","title":"Sprite default volume","text":"<pre><code>set_volume 100;\n</code></pre>"},{"location":"language/sprites/#set-sprite-default-visibility-to-hidden","title":"Set sprite default visibility to hidden","text":"<p>Hide sprite by default.</p> <pre><code>hide;\n</code></pre>"},{"location":"language/sprites/#set-sprite-default-rotation-style-to-left-right","title":"Set Sprite default rotation style to left-right","text":"<pre><code>set_rotation_style_left_right;\n</code></pre>"},{"location":"language/sprites/#set-sprite-default-rotation-style-to-all-around","title":"Set Sprite default rotation style to all around","text":"<pre><code>set_rotation_style_all_around;\n</code></pre>"},{"location":"language/sprites/#set-sprite-default-rotation-style-to-dont-rotate","title":"Set Sprite default rotation style to don't rotate","text":"<pre><code>set_rotation_style_do_not_rotate;\n</code></pre>"},{"location":"language/structs/","title":"Structs","text":"<p>Structs are a way to group related variables or lists together.</p>"},{"location":"language/structs/#declaration","title":"Declaration","text":"<pre><code>struct my_struct {\n    x,\n    y,\n    z\n}\n</code></pre>"},{"location":"language/structs/#default-values","title":"Default values","text":"<p>Struct fields can have default values.</p> <pre><code>struct my_struct {\n    field = \"default_value\"\n}\n\nmy_struct v = my_struct {};\n# -&gt; v.field == \"default_value\"\n</code></pre>"},{"location":"language/structs/#usage","title":"Usage","text":""},{"location":"language/structs/#declaring-a-struct-variable","title":"Declaring a struct variable","text":"<pre><code>my_struct my_variable = value;\n</code></pre>"},{"location":"language/structs/#declaring-a-struct-list","title":"Declaring a struct list","text":"<pre><code>list my_struct my_list;\n</code></pre>"},{"location":"language/structs/#accessing-struct-fields","title":"Accessing struct fields","text":""},{"location":"language/structs/#accessing-a-struct-variable-field","title":"Accessing a struct variable field","text":"<pre><code>my_variable.my_field\n</code></pre>"},{"location":"language/structs/#accessing-a-struct-argument-field","title":"Accessing a struct argument field","text":"<pre><code>$my_argument.my_field\n</code></pre>"},{"location":"language/structs/#accessing-a-struct-list-field","title":"Accessing a struct list field","text":"<pre><code>my_list[index].my_field\n</code></pre>"},{"location":"language/structs/#struct-literals","title":"Struct literals","text":"<p>Struct literals are a way to create structs.</p> <pre><code>my_struct my_variable = my_struct {\n    x: 10,\n    y: 20,\n    z: 30\n};\n</code></pre>"},{"location":"language/structs/#passing-structs","title":"Passing structs","text":"<p>You can pass structs to procedures via arguments or variables.</p> <pre><code>list my_struct my_list;\n\nproc my_procedure my_struct arg {\n    # code\n}\n\nonflag {\n    my_procedure my_struct {\n        x: 10,\n        y: 20,\n        z: 30\n    };\n    my_procedure my_list[1];\n}\n</code></pre> <pre><code>onflag {\n    my_struct foo = my_struct {\n        x: 10,\n        y: 20,\n        z: 30\n    };\n    my_struct bar = foo;\n}\n</code></pre>"},{"location":"language/structs/#limitations","title":"Limitations","text":""},{"location":"language/structs/#variables","title":"Variables","text":"<p>During struct variable assignment, fields are assigned sequentially. Consequently, if a  field references another field of the same struct during assignment, it will use the  updated value of previously assigned fields rather than their original values.</p> <p>For example:</p> <pre><code>pair = Pair { left: 100, right: 200 };\npair = Pair { left: pair.left + 100, right: pair.left };\n# Result: pair = Pair { left: 200, right: 200 };\n</code></pre> <p>In this case, the <code>pair.left</code> field is assigned first with the value 200, and  subsequently <code>pair.right</code> references the updated value of <code>pair.left</code>.</p> <p>This behavior can be mitigated by reordering the fields in the struct literal:</p> <pre><code>pair = Pair { right: pair.left, left: pair.left + 100 };\n</code></pre> <p>Same issues apply to all augmented assignment operators (<code>+=</code>)</p>"},{"location":"language/structs/#lists","title":"Lists","text":"<p>The issue with order of assignment applies to struct lists as well.</p>"},{"location":"language/syntax/","title":"Syntax","text":"<p>goboscript has a syntax inspired from languages such as C, Rust, and Python. Whitespace and indentation has no semantic significance. Statements end in semicolons.</p>"},{"location":"language/syntax/#comments","title":"Comments","text":"<pre><code># single-line comments are the only option.\n</code></pre>"},{"location":"language/syntax/#numbers","title":"Numbers","text":"<pre><code>0b111 # Binary:      7\n0xFF  # Hexadecimal: 255\n0o777 # Octal:       511\n1024  # Decimal:     1024\n3.141 # Float:       3.141\n</code></pre>"},{"location":"language/syntax/#strings","title":"Strings","text":"<pre><code>\"Hello, World!\"\n\"Hello, \\\"World\\\"!\"\n\"\\u1234\" # Unicode escape\n\"\\n\" # Newline\n\"\\t\" # Tab\n</code></pre>"},{"location":"language/syntax/#booleans","title":"Booleans","text":"<p><code>true</code> is replaced with <code>1</code> during compilation.</p> <p><code>false</code> is replaced with <code>0</code> during compilation.</p>"},{"location":"language/syntax/#boolean-coercion","title":"Boolean Coercion","text":"<p>Scratch does not allow placing a non-boolean block inside a boolean input. (With the exception of item # of list and item of list). goboscript will automatically coerce non-boolean blocks into conditions by wrapping them in a comparison with <code>1</code>.</p> <pre><code>if timer() {\n    ...\n}\n</code></pre> <p>is equivalent to</p> <pre><code>if timer() == 1 {\n    ...\n}\n</code></pre>"},{"location":"language/variables/","title":"Variables","text":""},{"location":"language/variables/#declarationassignment","title":"Declaration/Assignment","text":"<p>There are two ways to declare a variable:</p>"},{"location":"language/variables/#1-declare-using-a-top-level-var-statement","title":"1. Declare using a top-level <code>var</code> statement.","text":"<pre><code>var variable_name = const_expr;\n</code></pre>"},{"location":"language/variables/#2-declare-by-assigning-a-value-to-the-variable","title":"2. Declare by assigning a value to the variable.","text":"<p>The first assignment to a variable is considered its declaration.</p> <pre><code>variable_name = value;\n</code></pre> <pre><code>type_name variable_name = value;\n</code></pre>"},{"location":"language/variables/#variables-for-all-sprites","title":"Variables for all sprites","text":"<p>If a variable is assigned to in <code>stage.gs</code>, it will be declared as for all sprites.</p>"},{"location":"language/variables/#variables-for-this-sprite-only","title":"Variables for this sprite only","text":"<p>Variables are by-default declared as for this sprite only. If you want to declare a variable for all sprites, assign to it in <code>stage.gs</code>.</p>"},{"location":"language/variables/#local-variables","title":"Local Variables","text":"<p>Local variables are accessible only within the procedure they are declared in.</p> <p>The first assignment with the <code>local</code> keyword will declare a local variable, all further uses of the variable will refer to the local variable. If a normal variable with the same name exists, it will be shadowed.</p> <pre><code>proc my_procedure {\n    local x = 0;\n    x = x + 1;\n}\n</code></pre> <p>In the compiled Scratch project, the variable <code>x</code> will be named as <code>my_procedure:x</code>.</p> <p>Note</p> <p>Local variables will have undefined behavior if the procedure is recursive, or is NOT a run-without-screen-refresh procedure.</p>"},{"location":"language/variables/#compound-assignment","title":"Compound Assignment","text":"Operator Implementation <code>x++;</code> <code>x--;</code> <code>x += y;</code> <code>x -= y;</code> <code>x *= y;</code> <code>x /= y;</code> <code>x //= y;</code> <code>x %= y;</code> <code>x &amp;= y;</code>"},{"location":"language/variables/#showhide-variable-monitor","title":"Show/Hide Variable Monitor","text":"<pre><code>show variable_name;\n</code></pre> <pre><code>hide variable_name;\n</code></pre>"},{"location":"language/blocks/control/","title":"Control Blocks","text":""},{"location":"language/blocks/control/#wait-seconds","title":"wait () seconds","text":"<pre><code>wait duration;\n</code></pre> <pre><code>wait (duration) seconds\n</code></pre>"},{"location":"language/blocks/control/#stop-all","title":"stop [all]","text":"<pre><code>stop_all;\n</code></pre> <pre><code>stop [all v]\n</code></pre>"},{"location":"language/blocks/control/#stop-this-script","title":"stop [this script]","text":"<pre><code>stop_this_script;\n</code></pre> <pre><code>stop [this script v]\n</code></pre>"},{"location":"language/blocks/control/#stop-other-scripts-in-sprite","title":"stop [other scripts in sprite]","text":"<pre><code>stop_other_scripts;\n</code></pre> <pre><code>stop [other scripts in sprite v]\n</code></pre>"},{"location":"language/blocks/control/#delete-this-clone","title":"delete this clone","text":"<pre><code>delete_this_clone;\n</code></pre> <pre><code>delete this clone\n</code></pre>"},{"location":"language/blocks/control/#create-clone-of-myself","title":"create clone of [myself]","text":"<pre><code>clone;\n</code></pre> <pre><code>create clone of [myself v]\n</code></pre>"},{"location":"language/blocks/control/#create-clone-of","title":"create clone of ()","text":"<pre><code>clone \"sprite name\";\n</code></pre> <pre><code>create clone of (sprite name v)\n</code></pre>"},{"location":"language/blocks/events/","title":"Events Blocks","text":""},{"location":"language/blocks/events/#broadcast","title":"broadcast ()","text":"<pre><code>broadcast \"message 1\";\n</code></pre> <pre><code>broadcast (message 1 v)\n</code></pre>"},{"location":"language/blocks/events/#broadcast-and-wait","title":"broadcast () and wait","text":"<pre><code>broadcast_and_wait \"message 1\";\n</code></pre> <pre><code>broadcast (message 1 v) and wait\n</code></pre>"},{"location":"language/blocks/looks/","title":"Looks Blocks","text":""},{"location":"language/blocks/looks/#say-for-seconds","title":"say () for () seconds","text":"<pre><code>say message, secs;\n</code></pre> <pre><code>say (message) for (secs) seconds\n</code></pre>"},{"location":"language/blocks/looks/#think-for-seconds","title":"think () for () seconds","text":"<pre><code>think message, secs;\n</code></pre> <pre><code>think (message) for (secs) seconds\n</code></pre>"},{"location":"language/blocks/looks/#say","title":"say ()","text":"<pre><code>say message;\n</code></pre> <pre><code>say (message)\n</code></pre>"},{"location":"language/blocks/looks/#think","title":"think ()","text":"<pre><code>think message;\n</code></pre> <pre><code>think (message)\n</code></pre>"},{"location":"language/blocks/looks/#switch-costume-to","title":"switch costume to ()","text":"<pre><code>switch_costume \"costume\";\n</code></pre> <pre><code>switch costume to (costume v)\n</code></pre>"},{"location":"language/blocks/looks/#next-costume","title":"next costume","text":"<pre><code>next_costume;\n</code></pre> <pre><code>next costume\n</code></pre>"},{"location":"language/blocks/looks/#switch-backdrop-to-next-backdrop","title":"switch backdrop to (next backdrop)","text":"<pre><code>switch_backdrop \"backdrop\";\n</code></pre> <pre><code>switch backdrop to (backdrop v)\n</code></pre>"},{"location":"language/blocks/looks/#switch-backdrop-to-previous-backdrop","title":"switch backdrop to (previous backdrop)","text":"<pre><code>previous_backdrop;\n</code></pre> <pre><code>switch backdrop to (previous backdrop v)\n</code></pre>"},{"location":"language/blocks/looks/#switch-backdrop-to-random-backdrop","title":"switch backdrop to (random backdrop)","text":"<pre><code>random_backdrop;\n</code></pre> <pre><code>switch backdrop to (random backdrop v)\n</code></pre>"},{"location":"language/blocks/looks/#next-backdrop","title":"next backdrop","text":"<pre><code>next_backdrop;\n</code></pre> <pre><code>next backdrop\n</code></pre>"},{"location":"language/blocks/looks/#set-size-to","title":"set size to () %","text":"<pre><code>set_size size;\n</code></pre> <pre><code>set size to (size) %\n</code></pre>"},{"location":"language/blocks/looks/#change-size-by","title":"change size by ()","text":"<pre><code>change_size change;\n</code></pre> <pre><code>change size by (change)\n</code></pre>"},{"location":"language/blocks/looks/#change-color-effect-by","title":"change [color] effect by ()","text":"<pre><code>change_color_effect value;\n</code></pre> <pre><code>change [color v] effect by (value)\n</code></pre>"},{"location":"language/blocks/looks/#change-fisheye-effect-by","title":"change [fisheye] effect by ()","text":"<pre><code>change_fisheye_effect value;\n</code></pre> <pre><code>change [fisheye v] effect by (value)\n</code></pre>"},{"location":"language/blocks/looks/#change-whirl-effect-by","title":"change [whirl] effect by ()","text":"<pre><code>change_whirl_effect value;\n</code></pre> <pre><code>change [whirl v] effect by (value)\n</code></pre>"},{"location":"language/blocks/looks/#change-pixelate-effect-by","title":"change [pixelate] effect by ()","text":"<pre><code>change_pixelate_effect value;\n</code></pre> <pre><code>change [pixelate v] effect by (value)\n</code></pre>"},{"location":"language/blocks/looks/#change-mosaic-effect-by","title":"change [mosaic] effect by ()","text":"<pre><code>change_mosaic_effect value;\n</code></pre> <pre><code>change [mosaic v] effect by (value)\n</code></pre>"},{"location":"language/blocks/looks/#change-brightness-effect-by","title":"change [brightness] effect by ()","text":"<pre><code>change_brightness_effect value;\n</code></pre> <pre><code>change [brightness v] effect by (value)\n</code></pre>"},{"location":"language/blocks/looks/#change-ghost-effect-by","title":"change [ghost] effect by ()","text":"<pre><code>change_ghost_effect value;\n</code></pre> <pre><code>change [ghost v] effect by (value)\n</code></pre>"},{"location":"language/blocks/looks/#set-color-effect-to","title":"set [color] effect to ()","text":"<pre><code>set_color_effect value;\n</code></pre> <pre><code>set [color v] effect to (value)\n</code></pre>"},{"location":"language/blocks/looks/#set-fisheye-effect-to","title":"set [fisheye] effect to ()","text":"<pre><code>set_fisheye_effect value;\n</code></pre> <pre><code>set [fisheye v] effect to (value)\n</code></pre>"},{"location":"language/blocks/looks/#set-whirl-effect-to","title":"set [whirl] effect to ()","text":"<pre><code>set_whirl_effect value;\n</code></pre> <pre><code>set [whirl v] effect to (value)\n</code></pre>"},{"location":"language/blocks/looks/#set-pixelate-effect-to","title":"set [pixelate] effect to ()","text":"<pre><code>set_pixelate_effect value;\n</code></pre> <pre><code>set [pixelate v] effect to (value)\n</code></pre>"},{"location":"language/blocks/looks/#set-mosaic-effect-to","title":"set [mosaic] effect to ()","text":"<pre><code>set_mosaic_effect value;\n</code></pre> <pre><code>set [mosaic v] effect to (value)\n</code></pre>"},{"location":"language/blocks/looks/#set-brightness-effect-to","title":"set [brightness] effect to ()","text":"<pre><code>set_brightness_effect value;\n</code></pre> <pre><code>set [brightness v] effect to (value)\n</code></pre>"},{"location":"language/blocks/looks/#set-ghost-effect-to","title":"set [ghost] effect to ()","text":"<pre><code>set_ghost_effect value;\n</code></pre> <pre><code>set [ghost v] effect to (value)\n</code></pre>"},{"location":"language/blocks/looks/#clear-graphic-effects","title":"clear graphic effects","text":"<pre><code>clear_graphic_effects;\n</code></pre> <pre><code>clear graphic effects\n</code></pre>"},{"location":"language/blocks/looks/#show","title":"show","text":"<pre><code>show;\n</code></pre> <pre><code>show\n</code></pre>"},{"location":"language/blocks/looks/#hide","title":"hide","text":"<pre><code>hide;\n</code></pre> <pre><code>hide\n</code></pre>"},{"location":"language/blocks/looks/#go-to-front-layer","title":"go to [front] layer","text":"<pre><code>goto_front;\n</code></pre> <pre><code>go to [front v] layer\n</code></pre>"},{"location":"language/blocks/looks/#go-to-back-layer","title":"go to [back] layer","text":"<pre><code>goto_back;\n</code></pre> <pre><code>go to [back v] layer\n</code></pre>"},{"location":"language/blocks/looks/#go-forward-layers","title":"go [forward] () layers","text":"<pre><code>go_forward num;\n</code></pre> <pre><code>go [forward v] (num) layers\n</code></pre>"},{"location":"language/blocks/looks/#go-backward-layers","title":"go [backward] () layers","text":"<pre><code>go_backward num;\n</code></pre> <pre><code>go [backward v] (num) layers\n</code></pre>"},{"location":"language/blocks/motion/","title":"Motion Blocks","text":""},{"location":"language/blocks/motion/#move-steps","title":"move () steps","text":"<pre><code>move steps;\n</code></pre> <pre><code>move (steps) steps\n</code></pre>"},{"location":"language/blocks/motion/#turn-left-degrees","title":"turn left () degrees","text":"<pre><code>turn_left degrees;\n</code></pre> <pre><code>turn left (degrees) degrees\n</code></pre>"},{"location":"language/blocks/motion/#turn-right-degrees","title":"turn right () degrees","text":"<pre><code>turn_right degrees;\n</code></pre> <pre><code>turn right (degrees) degrees\n</code></pre>"},{"location":"language/blocks/motion/#go-to","title":"go to ()","text":"<pre><code>goto \"sprite\";\n</code></pre> <pre><code>go to (sprite v)\n</code></pre>"},{"location":"language/blocks/motion/#go-to-random-position","title":"go to (random position)","text":"<pre><code>goto_random_position;\n</code></pre> <pre><code>go to (random position v)\n</code></pre>"},{"location":"language/blocks/motion/#go-to-mouse-pointer","title":"go to (mouse-pointer)","text":"<pre><code>goto_mouse_pointer;\n</code></pre> <pre><code>go to (mouse-pointer v)\n</code></pre>"},{"location":"language/blocks/motion/#go-to-x-y","title":"go to x: () y: ()","text":"<pre><code>goto x, y;\n</code></pre> <pre><code>go to x: (x) y: (y)\n</code></pre>"},{"location":"language/blocks/motion/#glide-secs-to-x-y","title":"glide () secs to x: () y: ()","text":"<pre><code>glide x, y, secs;\n</code></pre> <pre><code>glide (secs) secs to x: (x) y: (y)\n</code></pre>"},{"location":"language/blocks/motion/#glide-secs-to","title":"glide () secs to ()","text":"<pre><code>glide_to \"sprite\", secs;\n</code></pre> <pre><code>glide (secs) secs to (sprite v)\n</code></pre>"},{"location":"language/blocks/motion/#glide-secs-to-random-position","title":"glide () secs to (random position)","text":"<pre><code>glide_to_random_position secs;\n</code></pre> <pre><code>glide (secs) secs to (random position v)\n</code></pre>"},{"location":"language/blocks/motion/#glide-secs-to-mouse-pointer","title":"glide () secs to (mouse-pointer)","text":"<pre><code>glide_to_mouse_pointer secs;\n</code></pre> <pre><code>glide (secs) secs to (mouse-pointer v)\n</code></pre>"},{"location":"language/blocks/motion/#point-in-direction","title":"point in direction ()","text":"<pre><code>point_in_direction direction;\n</code></pre> <pre><code>point in direction (direction)\n</code></pre>"},{"location":"language/blocks/motion/#point-towards-mouse-pointer","title":"point towards (mouse-pointer)","text":"<pre><code>point_towards_mouse_pointer;\n</code></pre> <pre><code>point towards (mouse-pointer v)\n</code></pre>"},{"location":"language/blocks/motion/#point-towards-random-direction","title":"point towards (random direction)","text":"<pre><code>point_towards_random_direction;\n</code></pre> <pre><code>point towards (random direction v)\n</code></pre>"},{"location":"language/blocks/motion/#point-towards","title":"point towards ()","text":"<pre><code>point_towards \"sprite\";\n</code></pre> <pre><code>point towards (sprite v)\n</code></pre>"},{"location":"language/blocks/motion/#change-x-by","title":"change x by ()","text":"<pre><code>change_x dx;\n</code></pre> <pre><code>change x by (dx)\n</code></pre>"},{"location":"language/blocks/motion/#set-x-to","title":"set x to ()","text":"<pre><code>set_x x;\n</code></pre> <pre><code>set x to (x)\n</code></pre>"},{"location":"language/blocks/motion/#change-y-by","title":"change y by ()","text":"<pre><code>change_y dy;\n</code></pre> <pre><code>change y by (dy)\n</code></pre>"},{"location":"language/blocks/motion/#set-y-to","title":"set y to ()","text":"<pre><code>set_y y;\n</code></pre> <pre><code>set y to (y)\n</code></pre>"},{"location":"language/blocks/motion/#if-on-edge-bounce","title":"if on edge, bounce","text":"<pre><code>if_on_edge_bounce;\n</code></pre> <pre><code>if on edge, bounce\n</code></pre>"},{"location":"language/blocks/motion/#set-rotation-style-left-right","title":"set rotation style [left-right]","text":"<pre><code>set_rotation_style_left_right;\n</code></pre> <pre><code>set rotation style [left-right v]\n</code></pre>"},{"location":"language/blocks/motion/#set-rotation-style-dont-rotate","title":"set rotation style [don't rotate]","text":"<pre><code>set_rotation_style_do_not_rotate;\n</code></pre> <pre><code>set rotation style [don't rotate v]\n</code></pre>"},{"location":"language/blocks/motion/#set-rotation-style-all-around","title":"set rotation style [all around]","text":"<pre><code>set_rotation_style_all_around;\n</code></pre> <pre><code>set rotation style [all around v]\n</code></pre>"},{"location":"language/blocks/music/","title":"Music Blocks","text":""},{"location":"language/blocks/music/#rest-for-beats","title":"rest for () beats","text":"<pre><code>rest beats;\n</code></pre> <pre><code>rest for (beats) beats\n</code></pre>"},{"location":"language/blocks/music/#set-tempo-to","title":"set tempo to ()","text":"<pre><code>set_tempo tempo_;\n</code></pre> <pre><code>set tempo to (tempo_)\n</code></pre>"},{"location":"language/blocks/music/#change-tempo-by","title":"change tempo by ()","text":"<pre><code>change_tempo tempo_;\n</code></pre> <pre><code>change tempo by (tempo_)\n</code></pre>"},{"location":"language/blocks/pen/","title":"Pen Blocks","text":""},{"location":"language/blocks/pen/#erase-all","title":"erase all","text":"<pre><code>erase_all;\n</code></pre> <pre><code>erase all\n</code></pre>"},{"location":"language/blocks/pen/#stamp","title":"stamp","text":"<pre><code>stamp;\n</code></pre> <pre><code>stamp\n</code></pre>"},{"location":"language/blocks/pen/#pen-down","title":"pen down","text":"<pre><code>pen_down;\n</code></pre> <pre><code>pen down\n</code></pre>"},{"location":"language/blocks/pen/#pen-up","title":"pen up","text":"<pre><code>pen_up;\n</code></pre> <pre><code>pen up\n</code></pre>"},{"location":"language/blocks/pen/#set-pen-color-to","title":"set pen color to ()","text":"<pre><code>set_pen_color color;\n</code></pre> <pre><code>set pen color to (color)\n</code></pre>"},{"location":"language/blocks/pen/#change-pen-size-by","title":"change pen size by ()","text":"<pre><code>change_pen_size size_;\n</code></pre> <pre><code>change pen size by (size_)\n</code></pre>"},{"location":"language/blocks/pen/#set-pen-size-to","title":"set pen size to ()","text":"<pre><code>set_pen_size size_;\n</code></pre> <pre><code>set pen size to (size_)\n</code></pre>"},{"location":"language/blocks/pen/#set-pen-color-to_1","title":"set pen [color] to ()","text":"<pre><code>set_pen_hue value;\n</code></pre> <pre><code>set pen [color v] to (value)\n</code></pre>"},{"location":"language/blocks/pen/#set-pen-saturation-to","title":"set pen [saturation] to ()","text":"<pre><code>set_pen_saturation value;\n</code></pre> <pre><code>set pen [saturation v] to (value)\n</code></pre>"},{"location":"language/blocks/pen/#set-pen-brightness-to","title":"set pen [brightness] to ()","text":"<pre><code>set_pen_brightness value;\n</code></pre> <pre><code>set pen [brightness v] to (value)\n</code></pre>"},{"location":"language/blocks/pen/#set-pen-transparency-to","title":"set pen [transparency] to ()","text":"<pre><code>set_pen_transparency value;\n</code></pre> <pre><code>set pen [transparency v] to (value)\n</code></pre>"},{"location":"language/blocks/pen/#change-pen-color-by","title":"change pen [color] by ()","text":"<pre><code>change_pen_hue value;\n</code></pre> <pre><code>change pen [color v] by (value)\n</code></pre>"},{"location":"language/blocks/pen/#change-pen-saturation-by","title":"change pen [saturation] by ()","text":"<pre><code>change_pen_saturation value;\n</code></pre> <pre><code>change pen [saturation v] by (value)\n</code></pre>"},{"location":"language/blocks/pen/#change-pen-brightness-by","title":"change pen [brightness] by ()","text":"<pre><code>change_pen_brightness value;\n</code></pre> <pre><code>change pen [brightness v] by (value)\n</code></pre>"},{"location":"language/blocks/pen/#change-pen-transparency-by","title":"change pen [transparency] by ()","text":"<pre><code>change_pen_transparency value;\n</code></pre> <pre><code>change pen [transparency v] by (value)\n</code></pre>"},{"location":"language/blocks/sensing/","title":"Sensing Blocks","text":""},{"location":"language/blocks/sensing/#ask-and-wait","title":"ask () and wait","text":"<pre><code>ask question;\n</code></pre> <pre><code>ask (question) and wait\n</code></pre>"},{"location":"language/blocks/sensing/#set-drag-mode-draggable","title":"set drag mode [draggable]","text":"<pre><code>set_drag_mode_draggable;\n</code></pre> <pre><code>set drag mode [draggable v]\n</code></pre>"},{"location":"language/blocks/sensing/#set-drag-mode-not-draggable","title":"set drag mode [not draggable]","text":"<pre><code>set_drag_mode_not_draggable;\n</code></pre> <pre><code>set drag mode [not draggable v]\n</code></pre>"},{"location":"language/blocks/sensing/#reset-timer","title":"reset timer","text":"<pre><code>reset_timer;\n</code></pre> <pre><code>reset timer\n</code></pre>"},{"location":"language/blocks/sound/","title":"Sound Blocks","text":""},{"location":"language/blocks/sound/#play-sound-until-done","title":"play sound () until done","text":"<pre><code>play_sound_until_done \"sound\";\n</code></pre> <pre><code>play sound (sound v) until done\n</code></pre>"},{"location":"language/blocks/sound/#start-sound","title":"start sound ()","text":"<pre><code>start_sound \"sound\";\n</code></pre> <pre><code>start sound (sound v)\n</code></pre>"},{"location":"language/blocks/sound/#stop-all-sounds","title":"stop all sounds","text":"<pre><code>stop_all_sounds;\n</code></pre> <pre><code>stop all sounds\n</code></pre>"},{"location":"language/blocks/sound/#change-pitch-effect-by","title":"change [pitch] effect by ()","text":"<pre><code>change_pitch_effect value;\n</code></pre> <pre><code>change [pitch v] effect by (value)\n</code></pre>"},{"location":"language/blocks/sound/#change-pan-effect-by","title":"change [pan] effect by ()","text":"<pre><code>change_pan_effect value;\n</code></pre> <pre><code>change [pan v] effect by (value)\n</code></pre>"},{"location":"language/blocks/sound/#set-pitch-effect-to","title":"set [pitch] effect to ()","text":"<pre><code>set_pitch_effect value;\n</code></pre> <pre><code>set [pitch v] effect to (value)\n</code></pre>"},{"location":"language/blocks/sound/#set-pan-effect-to","title":"set [pan] effect to ()","text":"<pre><code>set_pan_effect value;\n</code></pre> <pre><code>set [pan v] effect to (value)\n</code></pre>"},{"location":"language/blocks/sound/#change-volume-by","title":"change volume by ()","text":"<pre><code>change_volume volume;\n</code></pre> <pre><code>change volume by (volume)\n</code></pre>"},{"location":"language/blocks/sound/#set-volume-to","title":"set volume to () %","text":"<pre><code>set_volume volume;\n</code></pre> <pre><code>set volume to (volume) %\n</code></pre>"},{"location":"language/blocks/sound/#clear-sound-effects","title":"clear sound effects","text":"<pre><code>clear_sound_effects;\n</code></pre> <pre><code>clear sound effects\n</code></pre>"},{"location":"language/reporters/looks/","title":"Looks Reporters","text":""},{"location":"language/reporters/looks/#size","title":"size","text":"<pre><code>sprite_size = size();\n</code></pre> <pre><code>(size)\n</code></pre>"},{"location":"language/reporters/looks/#costume-number","title":"costume [number]","text":"<pre><code>costume_num = costume_number();\n</code></pre> <pre><code>(costume [number v])\n</code></pre>"},{"location":"language/reporters/looks/#costume-name","title":"costume [name]","text":"<pre><code>costume_name_str = costume_name();\n</code></pre> <pre><code>(costume [name v])\n</code></pre>"},{"location":"language/reporters/looks/#backdrop-number","title":"backdrop [number]","text":"<pre><code>backdrop_num = backdrop_number();\n</code></pre> <pre><code>(backdrop [number v])\n</code></pre>"},{"location":"language/reporters/looks/#backdrop-name","title":"backdrop [name]","text":"<pre><code>backdrop_name_str = backdrop_name();\n</code></pre> <pre><code>(backdrop [name v])\n</code></pre>"},{"location":"language/reporters/motion/","title":"Motion Reporters","text":""},{"location":"language/reporters/motion/#x-position","title":"x position","text":"<pre><code>x = x_position();\n</code></pre> <pre><code>(x position)\n</code></pre>"},{"location":"language/reporters/motion/#y-position","title":"y position","text":"<pre><code>y = y_position();\n</code></pre> <pre><code>(y position)\n</code></pre>"},{"location":"language/reporters/motion/#direction","title":"direction","text":"<pre><code>dir = direction();\n</code></pre> <pre><code>(direction)\n</code></pre>"},{"location":"language/reporters/sensing/","title":"Sensing Reporters","text":""},{"location":"language/reporters/sensing/#distance-to-mouse-pointer","title":"distance to [mouse-pointer]","text":"<pre><code>dist = distance_to_mouse_pointer();\n</code></pre> <pre><code>(distance to [mouse-pointer v])\n</code></pre>"},{"location":"language/reporters/sensing/#distance-to","title":"distance to ()","text":"<pre><code>dist = distance_to(\"sprite_name\");\n</code></pre> <pre><code>(distance to (sprite_name v))\n</code></pre>"},{"location":"language/reporters/sensing/#touching-mouse-pointer","title":"touching [mouse-pointer]?","text":"<pre><code>is_touching = touching_mouse_pointer();\n</code></pre> <pre><code>&lt;touching [mouse-pointer v]?&gt;\n</code></pre>"},{"location":"language/reporters/sensing/#touching-edge","title":"touching [edge]?","text":"<pre><code>is_touching = touching_edge();\n</code></pre> <pre><code>&lt;touching [edge v]?&gt;\n</code></pre>"},{"location":"language/reporters/sensing/#touching","title":"touching ()?","text":"<pre><code>is_touching = touching(\"sprite_name\");\n</code></pre> <pre><code>&lt;touching (sprite_name v)?&gt;\n</code></pre>"},{"location":"language/reporters/sensing/#key-pressed","title":"key () pressed?","text":"<pre><code>is_pressed = key_pressed(\"up arrow\");\n</code></pre> <pre><code>&lt;key (up arrow v) pressed?&gt;\n</code></pre>"},{"location":"language/reporters/sensing/#mouse-down","title":"mouse down?","text":"<pre><code>is_mouse_down = mouse_down();\n</code></pre> <pre><code>&lt;mouse down?&gt;\n</code></pre>"},{"location":"language/reporters/sensing/#mouse-x","title":"mouse x","text":"<pre><code>mx = mouse_x();\n</code></pre> <pre><code>(mouse x)\n</code></pre>"},{"location":"language/reporters/sensing/#mouse-y","title":"mouse y","text":"<pre><code>my = mouse_y();\n</code></pre> <pre><code>(mouse y)\n</code></pre>"},{"location":"language/reporters/sensing/#loudness","title":"loudness","text":"<pre><code>sound_level = loudness();\n</code></pre> <pre><code>(loudness)\n</code></pre>"},{"location":"language/reporters/sensing/#timer","title":"timer","text":"<pre><code>time_elapsed = timer();\n</code></pre> <pre><code>(timer)\n</code></pre>"},{"location":"language/reporters/sensing/#current-year","title":"current [year]","text":"<pre><code>year = current_year();\n</code></pre> <pre><code>(current [year v])\n</code></pre>"},{"location":"language/reporters/sensing/#current-month","title":"current [month]","text":"<pre><code>month = current_month();\n</code></pre> <pre><code>(current [month v])\n</code></pre>"},{"location":"language/reporters/sensing/#current-date","title":"current [date]","text":"<pre><code>date = current_date();\n</code></pre> <pre><code>(current [date v])\n</code></pre>"},{"location":"language/reporters/sensing/#current-day-of-week","title":"current [day of week]","text":"<pre><code>day = current_day_of_week();\n</code></pre> <pre><code>(current [day of week v])\n</code></pre>"},{"location":"language/reporters/sensing/#current-hour","title":"current [hour]","text":"<pre><code>hour = current_hour();\n</code></pre> <pre><code>(current [hour v])\n</code></pre>"},{"location":"language/reporters/sensing/#current-minute","title":"current [minute]","text":"<pre><code>minute = current_minute();\n</code></pre> <pre><code>(current [minute v])\n</code></pre>"},{"location":"language/reporters/sensing/#current-second","title":"current [second]","text":"<pre><code>second = current_second();\n</code></pre> <pre><code>(current [second v])\n</code></pre>"},{"location":"language/reporters/sensing/#days-since-2000","title":"days since 2000","text":"<pre><code>days = days_since_2000();\n</code></pre> <pre><code>(days since 2000)\n</code></pre>"},{"location":"language/reporters/sensing/#username","title":"username","text":"<pre><code>user = username();\n</code></pre> <pre><code>(username)\n</code></pre>"},{"location":"language/reporters/sensing/#touching-color","title":"touching color ()?","text":"<pre><code>is_touching_color = touching_color(0xff0000);\n</code></pre> <pre><code>&lt;touching color (#ff0000)?&gt;\n</code></pre>"},{"location":"language/reporters/sensing/#color-is-touching","title":"color () is touching ()?","text":"<pre><code>is_color_touching = color_is_touching_color(0xff0000, 0x00ff00);\n</code></pre> <pre><code>&lt;color (#ff0000) is touching (#00ff00)?&gt;\n</code></pre>"},{"location":"language/reporters/sensing/#answer","title":"answer","text":"<pre><code>user_answer = answer();\n</code></pre> <pre><code>(answer)\n</code></pre>"},{"location":"language/reporters/sensing/#difficult-to-name-thing-of-thing-block","title":"difficult to name thing of thing block","text":"<pre><code>backdrop_number = \"Stage\".\"backdrop #\";\n</code></pre> <pre><code>([backdrop #] of (Stage v))\n</code></pre>"},{"location":"language/reporters/sound/","title":"Sound Reporters","text":""},{"location":"language/reporters/sound/#volume","title":"volume","text":"<pre><code>current_volume = volume();\n</code></pre> <pre><code>(volume)\n</code></pre>"}]}